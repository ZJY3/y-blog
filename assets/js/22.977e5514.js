(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{438:function(n,s,a){"use strict";a.r(s);var e=a(1),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[n._v("#")]),n._v(" 线程池")]),n._v(" "),s("h3",{attrs:{id:"基本概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概述"}},[n._v("#")]),n._v(" 基本概述")]),n._v(" "),s("p",[n._v("线程池：一个容纳多个线程的容器，容器中的线程可以重复使用，省去了频繁创建和销毁线程对象的操作")]),n._v(" "),s("p",[n._v("线程池作用：")]),n._v(" "),s("ol",[s("li",[n._v("降低资源消耗，减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务")]),n._v(" "),s("li",[n._v("提高响应速度，当任务到达时，如果有线程可以直接用，不会出现系统僵死")]),n._v(" "),s("li",[n._v("提高线程的可管理性，如果无限制的创建线程，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控")])]),n._v(" "),s("p",[n._v("线程池的核心思想："),s("strong",[n._v("线程复用")]),n._v("，同一个线程可以被重复使用，来处理多个任务")]),n._v(" "),s("p",[n._v("池化技术 (Pool) ：一种编程技巧，核心思想是资源复用，在请求量大时能优化应用性能，降低系统频繁建连的资源开销")]),n._v(" "),s("h3",{attrs:{id:"阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列"}},[n._v("#")]),n._v(" 阻塞队列")]),n._v(" "),s("h4",{attrs:{id:"基本介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[n._v("#")]),n._v(" 基本介绍")]),n._v(" "),s("p",[n._v("有界队列和无界队列：")]),n._v(" "),s("ul",[s("li",[n._v("有界队列：有固定大小的队列，比如设定了固定大小的 LinkedBlockingQueue，又或者大小为 0")]),n._v(" "),s("li",[n._v("无界队列：没有设置固定大小的队列，这些队列可以直接入队，直到溢出（超过 Integer.MAX_VALUE），所以相当于无界")])]),n._v(" "),s("p",[n._v("java.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现："),s("strong",[n._v("FIFO 队列")])]),n._v(" "),s("ul",[s("li",[n._v("ArrayBlockQueue：由数组结构组成的有界阻塞队列")]),n._v(" "),s("li",[n._v("LinkedBlockingQueue：由链表结构组成的无界（默认大小 Integer.MAX_VALUE）的阻塞队列")]),n._v(" "),s("li",[n._v("PriorityBlockQueue：支持优先级排序的无界阻塞队列")]),n._v(" "),s("li",[n._v("DelayedWorkQueue：使用优先级队列实现的延迟无界阻塞队列")]),n._v(" "),s("li",[n._v("SynchronousQueue：不存储元素的阻塞队列，每一个生产线程会阻塞到有一个 put 的线程放入元素为止")]),n._v(" "),s("li",[n._v("LinkedTransferQueue：由链表结构组成的无界阻塞队列")]),n._v(" "),s("li",[n._v("LinkedBlockingDeque：由链表结构组成的"),s("strong",[n._v("双向")]),n._v("阻塞队列")])]),n._v(" "),s("p",[n._v("与普通队列（LinkedList、ArrayList等）的不同点在于阻塞队列中阻塞添加和阻塞删除方法，以及线程安全：")]),n._v(" "),s("ul",[s("li",[n._v("阻塞添加 put()：当阻塞队列元素已满时，添加队列元素的线程会被阻塞，直到队列元素不满时才重新唤醒线程执行")]),n._v(" "),s("li",[n._v("阻塞删除 take()：在队列元素为空时，删除队列元素的线程将被阻塞，直到队列不为空再执行删除操作（一般会返回被删除的元素)")])]),n._v(" "),s("h4",{attrs:{id:"核心方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心方法"}},[n._v("#")]),n._v(" 核心方法")]),n._v(" "),s("table",[s("thead",[s("tr",[s("th",[n._v("方法类型")]),n._v(" "),s("th",[n._v("抛出异常")]),n._v(" "),s("th",[n._v("特殊值")]),n._v(" "),s("th",[n._v("阻塞")]),n._v(" "),s("th",[n._v("超时")])])]),n._v(" "),s("tbody",[s("tr",[s("td",[n._v("插入（尾）")]),n._v(" "),s("td",[n._v("add(e)")]),n._v(" "),s("td",[n._v("offer(e)")]),n._v(" "),s("td",[n._v("put(e)")]),n._v(" "),s("td",[n._v("offer(e,time,unit)")])]),n._v(" "),s("tr",[s("td",[n._v("移除（头）")]),n._v(" "),s("td",[n._v("remove()")]),n._v(" "),s("td",[n._v("poll()")]),n._v(" "),s("td",[n._v("take()")]),n._v(" "),s("td",[n._v("poll(time,unit)")])]),n._v(" "),s("tr",[s("td",[n._v("检查（队首元素）")]),n._v(" "),s("td",[n._v("element()")]),n._v(" "),s("td",[n._v("peek()")]),n._v(" "),s("td",[n._v("不可用")]),n._v(" "),s("td",[n._v("不可用")])])])]),n._v(" "),s("ul",[s("li",[n._v("抛出异常组：\n"),s("ul",[s("li",[n._v("当阻塞队列满时：在往队列中 add 插入元素会抛出 IIIegalStateException: Queue full")]),n._v(" "),s("li",[n._v("当阻塞队列空时：再往队列中 remove 移除元素，会抛出 NoSuchException")])])]),n._v(" "),s("li",[n._v("特殊值组：\n"),s("ul",[s("li",[n._v("插入方法：成功 true，失败 false")]),n._v(" "),s("li",[n._v("移除方法：成功返回出队列元素，队列没有就返回 null")])])]),n._v(" "),s("li",[n._v("阻塞组：\n"),s("ul",[s("li",[n._v("当阻塞队列满时，生产者继续往队列里 put 元素，队列会一直阻塞生产线程直到队列有空间 put 数据或响应中断退出")]),n._v(" "),s("li",[n._v("当阻塞队列空时，消费者线程试图从队列里 take 元素，队列会一直阻塞消费者线程直到队列中有可用元素")])])]),n._v(" "),s("li",[n._v("超时退出：当阻塞队列满时，队里会阻塞生产者线程一定时间，超过限时后生产者线程会退出")])]),n._v(" "),s("h4",{attrs:{id:"链表队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表队列"}},[n._v("#")]),n._v(" 链表队列")]),n._v(" "),s("h5",{attrs:{id:"入队出队"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入队出队"}},[n._v("#")]),n._v(" 入队出队")]),n._v(" "),s("p",[n._v("LinkedBlockingQueue 源码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class LinkedBlockingQueue<E> extends AbstractQueue<E>\n            implements BlockingQueue<E>, java.io.Serializable {\n    static class Node<E> {\n        E item;\n        /**\n        * 下列三种情况之一\n        * - 真正的后继节点\n        * - 自己, 发生在出队时\n        * - null, 表示是没有后继节点, 是尾节点了\n        */\n        Node<E> next;\n\n        Node(E x) { item = x; }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("p",[n._v("入队："),s("strong",[n._v("尾插法")])]),n._v(" "),s("ul",[s("li",[s("p",[n._v("初始化链表 "),s("code",[n._v("last = head = new Node<E>(null)")]),n._v("，"),s("strong",[n._v("Dummy 节点用来占位")]),n._v("，item 为 null")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public LinkedBlockingQueue(int capacity) {\n    // 默认是 Integer.MAX_VALUE\n    if (capacity <= 0) throw new IllegalArgumentException();\n    this.capacity = capacity;\n    last = head = new Node<E>(null);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("当一个节点入队：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private void enqueue(Node<E> node) {\n    // 从右向左计算\n    last = last.next = node;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-LinkedBlockingQueue%E5%85%A5%E9%98%9F%E6%B5%81%E7%A8%8B.png",alt:"img"}})])]),n._v(" "),s("li",[s("p",[n._v("再来一个节点入队 "),s("code",[n._v("last = last.next = node")])])])]),n._v(" "),s("p",[n._v("出队："),s("strong",[n._v("出队头节点")]),n._v("，FIFO")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("出队源码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private E dequeue() {\n    Node<E> h = head;\n    // 获取临头节点\n    Node<E> first = h.next;\n    // 自己指向自己，help GC\n    h.next = h;\n    head = first;\n    // 出队的元素\n    E x = first.item;\n    // 【当前节点置为 Dummy 节点】\n    first.item = null;\n    return x;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])])]),n._v(" "),s("li",[s("p",[s("code",[n._v("h = head")]),n._v(" → "),s("code",[n._v("first = h.next")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-LinkedBlockingQueue%E5%87%BA%E9%98%9F%E6%B5%81%E7%A8%8B1.png",alt:"img"}})])]),n._v(" "),s("li",[s("p",[s("code",[n._v("h.next = h")]),n._v(" → "),s("code",[n._v("head = first")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-LinkedBlockingQueue%E5%87%BA%E9%98%9F%E6%B5%81%E7%A8%8B2.png",alt:"img"}})]),n._v(" "),s("ul",[s("li",[s("code",[n._v("first.item = null")]),n._v("：当前节点置为 Dummy 节点")])])])]),n._v(" "),s("h5",{attrs:{id:"加锁分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加锁分析"}},[n._v("#")]),n._v(" 加锁分析")]),n._v(" "),s("p",[n._v("用了两把锁和 dummy 节点：")]),n._v(" "),s("ul",[s("li",[n._v("用一把锁，同一时刻，最多只允许有一个线程（生产者或消费者，二选一）执行")]),n._v(" "),s("li",[n._v("用两把锁，同一时刻，可以允许两个线程同时（一个生产者与一个消费者）执行\n"),s("ul",[s("li",[n._v("消费者与消费者线程仍然串行")]),n._v(" "),s("li",[n._v("生产者与生产者线程仍然串行")])])])]),n._v(" "),s("p",[n._v("线程安全分析：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("当节点总数大于 2 时（包括 dummy 节点），"),s("strong",[n._v("putLock 保证的是 last 节点的线程安全，takeLock 保证的是 head 节点的线程安全")]),n._v("，两把锁保证了入队和出队没有竞争")])]),n._v(" "),s("li",[s("p",[n._v("当节点总数等于 2 时（即一个 dummy 节点，一个正常节点）这时候，仍然是两把锁锁两个对象，不会竞争")])]),n._v(" "),s("li",[s("p",[n._v("当节点总数等于 1 时（就一个 dummy 节点）这时 take 线程会被 notEmpty 条件阻塞，有竞争，会阻塞")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 用于 put(阻塞) offer(非阻塞)\nprivate final ReentrantLock putLock = new ReentrantLock();\nprivate final Condition notFull = putLock.newCondition();   // 阻塞等待不满，说明已经满了\n\n// 用于 take(阻塞) poll(非阻塞)\nprivate final ReentrantLock takeLock = new ReentrantLock();\nprivate final Condition notEmpty = takeLock.newCondition(); // 阻塞等待不空，说明已经是空的\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])])])]),n._v(" "),s("p",[n._v("入队出队：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("put 操作：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void put(E e) throws InterruptedException {\n    // 空指针异常\n    if (e == null) throw new NullPointerException();\n    int c = -1;\n    // 把待添加的元素封装为 node 节点\n    Node<E> node = new Node<E>(e);\n    // 获取全局生产锁\n    final ReentrantLock putLock = this.putLock;\n    // count 用来维护元素计数\n    final AtomicInteger count = this.count;\n    // 获取可打断锁，会抛出异常\n    putLock.lockInterruptibly();\n    try {\n        // 队列满了等待\n        while (count.get() == capacity) {\n            // 【等待队列不满时，就可以生产数据】，线程处于 Waiting\n            notFull.await();\n        }\n        // 有空位, 入队且计数加一，尾插法\n        enqueue(node);\n        // 返回自增前的数字\n        c = count.getAndIncrement();\n        // put 完队列还有空位, 唤醒其他生产 put 线程，唤醒一个减少竞争\n        if (c + 1 < capacity)\n            notFull.signal();\n    } finally {\n        // 解锁\n        putLock.unlock();\n    }\n    // c自增前是0，说明生产了一个元素，唤醒一个 take 线程\n    if (c == 0)\n        signalNotEmpty();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private void signalNotEmpty() {\n    final ReentrantLock takeLock = this.takeLock;\n    takeLock.lock();\n    try {\n        // 调用 notEmpty.signal()，而不是 notEmpty.signalAll() 是为了减少竞争，因为只剩下一个元素\n        notEmpty.signal();\n    } finally {\n        takeLock.unlock();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("take 操作：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public E take() throws InterruptedException {\n    E x;\n    int c = -1;\n    // 元素个数\n    final AtomicInteger count = this.count;\n    // 获取全局消费锁\n    final ReentrantLock takeLock = this.takeLock;\n    // 可打断锁\n    takeLock.lockInterruptibly();\n    try {\n        // 没有元素可以出队\n        while (count.get() == 0) {\n            // 【阻塞等待队列不空，就可以消费数据】，线程处于 Waiting\n            notEmpty.await();\n        }\n        // 出队，计数减一，FIFO，出队头节点\n        x = dequeue();\n        // 返回自减前的数字\n        c = count.getAndDecrement();\n        // 队列还有元素\n        if (c > 1)\n            // 唤醒一个消费take线程\n            notEmpty.signal();\n    } finally {\n        takeLock.unlock();\n    }\n    // c 是消费前的数据，消费前满了，消费一个后还剩一个空位，唤醒生产线程\n    if (c == capacity)\n        // 调用的是 notFull.signal() 而不是 notFull.signalAll() 是为了减少竞争\n        signalNotFull();\n    return x;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"性能比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能比较"}},[n._v("#")]),n._v(" 性能比较")]),n._v(" "),s("p",[n._v("主要列举 LinkedBlockingQueue 与 ArrayBlockingQueue 的性能比较：")]),n._v(" "),s("ul",[s("li",[n._v("Linked 支持有界，Array 强制有界")]),n._v(" "),s("li",[n._v("Linked 实现是链表，Array 实现是数组")]),n._v(" "),s("li",[n._v("Linked 是懒惰的，而 Array 需要提前初始化 Node 数组")]),n._v(" "),s("li",[n._v("Linked 每次入队会生成新 Node，而 Array 的 Node 是提前创建好的")]),n._v(" "),s("li",[n._v("Linked 两把锁，Array 一把锁")])]),n._v(" "),s("h4",{attrs:{id:"同步队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步队列"}},[n._v("#")]),n._v(" 同步队列")]),n._v(" "),s("h5",{attrs:{id:"成员属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员属性"}},[n._v("#")]),n._v(" 成员属性")]),n._v(" "),s("p",[n._v("SynchronousQueue 是一个不存储元素的 BlockingQueue，"),s("strong",[n._v("每一个生产者必须阻塞匹配到一个消费者")])]),n._v(" "),s("p",[n._v("成员变量：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("运行当前程序的平台拥有 CPU 的数量：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static final int NCPUS = Runtime.getRuntime().availableProcessors()\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("指定超时时间后，当前线程最大自旋次数：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 只有一个 CPU 时自旋次数为 0，所有程序都是串行执行，多核 CPU 时自旋 32 次是一个经验值\nstatic final int maxTimedSpins = (NCPUS < 2) ? 0 : 32;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("自旋的原因：线程挂起唤醒需要进行上下文切换，涉及到用户态和内核态的转变，是非常消耗资源的。自旋期间线程会一直检查自己的状态是否被匹配到，如果自旋期间被匹配到，那么直接就返回了，如果自旋次数达到某个指标后，还是会将当前线程挂起")])]),n._v(" "),s("li",[s("p",[n._v("未指定超时时间，当前线程最大自旋次数：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static final int maxUntimedSpins = maxTimedSpins * 16;  // maxTimedSpins 的 16 倍\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("指定超时限制的阈值，小于该值的线程不会被挂起：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static final long spinForTimeoutThreshold = 1000L;  // 纳秒\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("超时时间设置的小于该值，就会被禁止挂起，阻塞再唤醒的成本太高，不如选择自旋空转")])]),n._v(" "),s("li",[s("p",[n._v("转换器：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private transient volatile Transferer<E> transferer;\nabstract static class Transferer<E> {\n    /**\n    * 参数一：可以为 null，null 时表示这个请求是一个 REQUEST 类型的请求，反之是一个 DATA 类型的请求\n    * 参数二：如果为 true 表示指定了超时时间，如果为 false 表示不支持超时，会一直阻塞到匹配或者被打断\n    * 参数三：超时时间限制，单位是纳秒\n    \n    * 返回值：返回值如果不为 null 表示匹配成功，DATA 类型的请求返回当前线程 put 的数据\n    *        如果返回 null，表示请求超时或被中断\n    */\n    abstract E transfer(E e, boolean timed, long nanos);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("构造方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public SynchronousQueue(boolean fair) {\n    // fair 默认 false\n    // 非公平模式实现的数据结构是栈，公平模式的数据结构是队列\n    transferer = fair ? new TransferQueue<E>() : new TransferStack<E>();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("成员方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean offer(E e) {\n    if (e == null) throw new NullPointerException();\n    return transferer.transfer(e, true, 0) != null;\n}\npublic E poll() {\n    return transferer.transfer(null, true, 0);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"非公实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非公实现"}},[n._v("#")]),n._v(" 非公实现")]),n._v(" "),s("p",[n._v("TransferStack 是非公平的同步队列，因为所有的请求都被压入栈中，栈顶的元素会最先得到匹配，造成栈底的等待线程饥饿")]),n._v(" "),s("p",[n._v("TransferStack 类成员变量：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("请求类型：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 表示 Node 类型为请求类型\nstatic final int REQUEST    = 0;\n// 表示 Node类 型为数据类型\nstatic final int DATA       = 1;\n// 表示 Node 类型为匹配中类型\n// 假设栈顶元素为 REQUEST-NODE，当前请求类型为 DATA，入栈会修改类型为 FULFILLING 【栈顶 & 栈顶之下的一个node】\n// 假设栈顶元素为 DATA-NODE，当前请求类型为 REQUEST，入栈会修改类型为 FULFILLING 【栈顶 & 栈顶之下的一个node】\nstatic final int FULFILLING = 2;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("栈顶元素：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("volatile SNode head;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])])]),n._v(" "),s("p",[n._v("内部类 SNode：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("成员变量：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static final class SNode {\n    // 指向下一个栈帧\n    volatile SNode next; \n    // 与当前 node 匹配的节点\n    volatile SNode match;\n    // 假设当前node对应的线程自旋期间未被匹配成功，那么node对应的线程需要挂起，\n    // 挂起前 waiter 保存对应的线程引用，方便匹配成功后，被唤醒。\n    volatile Thread waiter;\n    \n    // 数据域，不为空表示当前 Node 对应的请求类型为 DATA 类型，反之则表示 Node 为 REQUEST 类型\n    Object item; \n    // 表示当前Node的模式 【DATA/REQUEST/FULFILLING】\n    int mode;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("构造方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("SNode(Object item) {\n    this.item = item;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("设置方法：设置 Node 对象的 next 字段，此处"),s("strong",[n._v("对 CAS 进行了优化")]),n._v("，提升了 CAS 的效率")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("boolean casNext(SNode cmp, SNode val) {\n    //【优化：cmp == next】，可以提升一部分性能。 cmp == next 不相等，就没必要走 cas指令。\n    return cmp == next && UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("匹配方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("boolean tryMatch(SNode s) {\n    // 当前 node 尚未与任何节点发生过匹配，CAS 设置 match 字段为 s 节点，表示当前 node 已经被匹配\n    if (match == null && UNSAFE.compareAndSwapObject(this, matchOffset, null, s)) {\n        // 当前 node 如果自旋结束，会 park 阻塞，阻塞前将 node 对应的 Thread 保留到 waiter 字段\n        // 获取当前 node 对应的阻塞线程\n        Thread w = waiter;\n        // 条件成立说明 node 对应的 Thread 正在阻塞\n        if (w != null) {\n            waiter = null;\n            // 使用 unpark 方式唤醒线程\n            LockSupport.unpark(w);\n        }\n        return true;\n    }\n    // 匹配成功返回 true\n    return match == s;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("取消方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 取消节点的方法\nvoid tryCancel() {\n    // match 字段指向自己，表示这个 node 是取消状态，取消状态的 node，最终会被强制移除出栈\n    UNSAFE.compareAndSwapObject(this, matchOffset, null, this);\n}\n\nboolean isCancelled() {\n    return match == this;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])])])]),n._v(" "),s("p",[n._v("TransferStack 类成员方法：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("snode()：填充节点方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static SNode snode(SNode s, Object e, SNode next, int mode) {\n    // 引用指向空时，snode 方法会创建一个 SNode 对象 \n    if (s == null) s = new SNode(e);\n    // 填充数据\n    s.mode = mode;\n    s.next = next;\n    return s;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("transfer()：核心方法，请求匹配出栈，不匹配阻塞")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("E transfer(E e, boolean timed, long nanos) {\n    // 包装当前线程的 node\n    SNode s = null;\n    // 根据元素判断当前的请求类型\n    int mode = (e == null) ? REQUEST : DATA;\n    // 自旋\n    for (;;) {\n        // 获取栈顶指针\n        SNode h = head;\n       // 【CASE1】：当前栈为空或者栈顶 node 模式与当前请求模式一致无法匹配，做入栈操作\n        if (h == null || h.mode == mode) {\n            // 当前请求是支持超时的，但是 nanos <= 0 说明这个请求不支持 “阻塞等待”\n            if (timed && nanos <= 0) { \n                // 栈顶元素是取消状态\n                if (h != null && h.isCancelled())\n                    // 栈顶出栈，设置新的栈顶\n                    casHead(h, h.next);\n                else\n                    // 表示【匹配失败】\n                    return null;\n            // 入栈\n            } else if (casHead(h, s = snode(s, e, h, mode))) {\n                // 等待被匹配的逻辑，正常情况返回匹配的节点；取消情况返回当前节点，就是 s\n                SNode m = awaitFulfill(s, timed, nanos);\n                // 说明当前 node 是【取消状态】\n                if (m == s) { \n                    // 将取消节点出栈\n                    clean(s);\n                    return null;\n                }\n                // 执行到这说明【匹配成功】了\n                // 栈顶有节点并且 匹配节点还未出栈，需要协助出栈\n                if ((h = head) != null && h.next == s)\n                    casHead(h, s.next);\n                // 当前 node 模式为 REQUEST 类型，返回匹配节点的 m.item 数据域\n                // 当前 node 模式为 DATA 类型：返回 node.item 数据域，当前请求提交的数据 e\n                return (E) ((mode == REQUEST) ? m.item : s.item);\n            }\n        // 【CASE2】：逻辑到这说明请求模式不一致，如果栈顶不是 FULFILLING 说明没被其他节点匹配，【当前可以匹配】\n        } else if (!isFulfilling(h.mode)) {\n            // 头节点是取消节点，match 指向自己，协助出栈\n            if (h.isCancelled())\n                casHead(h, h.next);\n            // 入栈当前请求的节点\n            else if (casHead(h, s=snode(s, e, h, FULFILLING|mode))) {\n                for (;;) { \n                    // m 是 s 的匹配的节点\n                    SNode m = s.next;\n                    // m 节点在 awaitFulfill 方法中被中断，clean 了自己\n                    if (m == null) {\n                        // 清空栈\n                        casHead(s, null);\n                        s = null;\n                        // 返回到外层自旋中\n                        break;\n                    }\n                    // 获取匹配节点的下一个节点\n                    SNode mn = m.next;\n                    // 尝试匹配，【匹配成功】，则将 fulfilling 和 m 一起出栈，并且唤醒被匹配的节点的线程\n                    if (m.tryMatch(s)) {\n                        casHead(s, mn);\n                        return (E) ((mode == REQUEST) ? m.item : s.item);\n                    } else\n                        // 匹配失败，出栈 m\n                        s.casNext(m, mn);\n                }\n            }\n        // 【CASE3】：栈顶模式为 FULFILLING 模式，表示【栈顶和栈顶下面的节点正在发生匹配】，当前请求需要做协助工作\n        } else {\n            // h 表示的是 fulfilling 节点，m 表示 fulfilling 匹配的节点\n            SNode m = h.next;\n            if (m == null)\n                // 清空栈\n                casHead(h, null);\n            else {\n                SNode mn = m.next;\n                // m 和 h 匹配，唤醒 m 中的线程\n                if (m.tryMatch(h))\n                    casHead(h, mn);\n                else\n                    h.casNext(m, mn);\n            }\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("awaitFulfill()：阻塞当前线程等待被匹配，返回匹配的节点，或者被取消的节点")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("SNode awaitFulfill(SNode s, boolean timed, long nanos) {\n    // 等待的截止时间\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    // 当前线程\n    Thread w = Thread.currentThread();\n    // 表示当前请求线程在下面的 for(;;) 自旋检查的次数\n    int spins = (shouldSpin(s) ? (timed ? maxTimedSpins : maxUntimedSpins) : 0);\n    // 自旋检查逻辑：是否匹配、是否超时、是否被中断\n    for (;;) {\n        // 当前线程收到中断信号，需要设置 node 状态为取消状态\n        if (w.isInterrupted())\n            s.tryCancel();\n        // 获取与当前 s 匹配的节点\n        SNode m = s.match;\n        if (m != null)\n            // 可能是正常的匹配的，也可能是取消的\n            return m;\n        // 执行了超时限制就判断是否超时\n        if (timed) {\n            nanos = deadline - System.nanoTime();\n            // 【超时了，取消节点】\n            if (nanos <= 0L) {\n                s.tryCancel();\n                continue;\n            }\n        }\n        // 说明当前线程还可以进行自旋检查\n        if (spins > 0)\n            // 自旋一次 递减 1\n            spins = shouldSpin(s) ? (spins - 1) : 0;\n        // 说明没有自旋次数了\n        else if (s.waiter == null)\n            //【把当前 node 对应的 Thread 保存到 node.waiter 字段中，要阻塞了】\n            s.waiter = w;\n        // 没有超时限制直接阻塞\n        else if (!timed)\n            LockSupport.park(this);\n        // nanos > 1000 纳秒的情况下，才允许挂起当前线程\n        else if (nanos > spinForTimeoutThreshold)\n            LockSupport.parkNanos(this, nanos);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("boolean shouldSpin(SNode s) {\n    // 获取栈顶\n    SNode h = head;\n    // 条件一成立说明当前 s 就是栈顶，允许自旋检查\n    // 条件二成立说明当前 s 节点自旋检查期间，又来了一个与当前 s 节点匹配的请求，双双出栈后条件会成立\n    // 条件三成立前提当前 s 不是栈顶元素，并且当前栈顶正在匹配中，这种状态栈顶下面的元素，都允许自旋检查\n    return (h == s || h == null || isFulfilling(h.mode));\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("clear()：指定节点出栈")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("void clean(SNode s) {\n    // 清空数据域和关联线程\n    s.item = null;\n    s.waiter = null;\n    \n    // 获取取消节点的下一个节点\n    SNode past = s.next;\n    // 判断后继节点是不是取消节点，是就更新 past\n    if (past != null && past.isCancelled())\n        past = past.next;\n\n    SNode p;\n    // 从栈顶开始向下检查，【将栈顶开始向下的 取消状态 的节点全部清理出去】，直到碰到 past 或者不是取消状态为止\n    while ((p = head) != null && p != past && p.isCancelled())\n        // 修改的是内存地址对应的值，p 指向该内存地址所以数据一直在变化\n        casHead(p, p.next);\n    // 说明中间遇到了不是取消状态的节点，继续迭代下去\n    while (p != null && p != past) {\n        SNode n = p.next;\n        if (n != null && n.isCancelled())\n            p.casNext(n, n.next);\n        else\n            p = n;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"公平实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公平实现"}},[n._v("#")]),n._v(" 公平实现")]),n._v(" "),s("p",[n._v("TransferQueue 是公平的同步队列，采用 FIFO 的队列实现，请求节点与队尾模式不同，需要与队头发生匹配")]),n._v(" "),s("p",[n._v("TransferQueue 类成员变量：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("指向队列的 dummy 节点：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("transient volatile QNode head;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("指向队列的尾节点：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("transient volatile QNode tail;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("被清理节点的前驱节点：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("transient volatile QNode cleanMe;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("入队操作是两步完成的，第一步是 t.next = newNode，第二步是 tail = newNode，所以队尾节点出队，是一种非常特殊的情况")])])]),n._v(" "),s("p",[n._v("TransferQueue 内部类：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("QNode：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static final class QNode {\n    // 指向当前节点的下一个节点\n    volatile QNode next;\n    // 数据域，Node 代表的是 DATA 类型 item 表示数据，否则 Node 代表的 REQUEST 类型，item == null\n    volatile Object item;\n    // 假设当前 node 对应的线程自旋期间未被匹配成功，那么 node 对应的线程需要挂起，\n    // 挂起前 waiter 保存对应的线程引用，方便匹配成功后被唤醒。\n    volatile Thread waiter;\n    // true 当前 Node 是一个 DATA 类型，false 表示当前 Node 是一个 REQUEST 类型\n    final boolean isData;\n\n    // 构建方法\n    QNode(Object item, boolean isData) {\n        this.item = item;\n        this.isData = isData;\n    }\n\n    // 尝试取消当前 node，取消状态的 node 的 item 域指向自己\n    void tryCancel(Object cmp) {\n        UNSAFE.compareAndSwapObject(this, itemOffset, cmp, this);\n    }\n\n    // 判断当前 node 是否为取消状态\n    boolean isCancelled() {\n        return item == this;\n    }\n\n    // 判断当前节点是否 “不在” 队列内，当 next 指向自己时，说明节点已经出队。\n    boolean isOffList() {\n        return next == this;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br")])])])]),n._v(" "),s("p",[n._v("TransferQueue 类成员方法：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("设置头尾节点：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("void advanceHead(QNode h, QNode nh) {\n    // 设置头指针指向新的节点，\n    if (h == head && UNSAFE.compareAndSwapObject(this, headOffset, h, nh))\n        // 老的头节点出队\n        h.next = h;\n}\nvoid advanceTail(QNode t, QNode nt) {\n    if (tail == t)\n        // 更新队尾节点为新的队尾\n        UNSAFE.compareAndSwapObject(this, tailOffset, t, nt);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("transfer()：核心方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("E transfer(E e, boolean timed, long nanos) {\n    // s 指向当前请求对应的 node\n    QNode s = null;\n    // 是否是 DATA 类型的请求\n    boolean isData = (e != null);\n    // 自旋\n    for (;;) {\n        QNode t = tail;\n        QNode h = head;\n        if (t == null || h == null)\n            continue;\n        // head 和 tail 同时指向 dummy 节点，说明是空队列\n        // 队尾节点与当前请求类型是一致的情况，说明阻塞队列中都无法匹配，\n        if (h == t || t.isData == isData) {\n            // 获取队尾 t 的 next 节点\n            QNode tn = t.next;\n            // 多线程环境中其他线程可能修改尾节点\n            if (t != tail)\n                continue;\n            // 已经有线程入队了，更新 tail\n            if (tn != null) {\n                advanceTail(t, tn);\n                continue;\n            }\n            // 允许超时，超时时间小于 0，这种方法不支持阻塞等待\n            if (timed && nanos <= 0)\n                return null;\n            // 创建 node 的逻辑\n            if (s == null)\n                s = new QNode(e, isData);\n            // 将 node 添加到队尾\n            if (!t.casNext(null, s))\n                continue;\n            // 更新队尾指针\n            advanceTail(t, s);\n            \n            // 当前节点 等待匹配....\n            Object x = awaitFulfill(s, e, timed, nanos);\n            \n            // 说明【当前 node 状态为 取消状态】，需要做出队逻辑\n            if (x == s) {\n                clean(t, s);\n                return null;\n            }\n            // 说明当前 node 仍然在队列内，匹配成功，需要做出队逻辑\n            if (!s.isOffList()) {\n                // t 是当前 s 节点的前驱节点，判断 t 是不是头节点，是就更新 dummy 节点为 s 节点\n                advanceHead(t, s);\n                // s 节点已经出队，所以需要把它的 item 域设置为它自己，表示它是个取消状态\n                if (x != null)\n                    s.item = s;\n                s.waiter = null;\n            }\n            return (x != null) ? (E)x : e;\n        // 队尾节点与当前请求节点【互补匹配】\n        } else {\n            // h.next 节点，【请求节点与队尾模式不同，需要与队头发生匹配】，TransferQueue 是一个【公平模式】\n            QNode m = h.next;\n            // 并发导致其他线程修改了队尾节点，或者已经把 head.next 匹配走了\n            if (t != tail || m == null || h != head)\n                continue;\n            // 获取匹配节点的数据域保存到 x\n            Object x = m.item;\n            // 判断是否匹配成功\n            if (isData == (x != null) ||\n                x == m ||\n                !m.casItem(x, e)) {\n                advanceHead(h, m);\n                continue;\n            }\n            // 【匹配完成】，将头节点出队，让这个新的头结点成为 dummy 节点\n            advanceHead(h, m);\n            // 唤醒该匹配节点的线程\n            LockSupport.unpark(m.waiter);\n            return (x != null) ? (E)x : e;\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("awaitFulfill()：阻塞当前线程等待被匹配")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Object awaitFulfill(QNode s, E e, boolean timed, long nanos) {\n    // 表示等待截止时间\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    Thread w = Thread.currentThread();\n    // 自选检查的次数\n    int spins = ((head.next == s) ? (timed ? maxTimedSpins : maxUntimedSpins) : 0);\n    for (;;) {\n        // 被打断就取消节点\n        if (w.isInterrupted())\n            s.tryCancel(e);\n        // 获取当前 Node 数据域\n        Object x = s.item;\n        \n        // 当前请求为 DATA 模式时：e 请求带来的数据\n        // s.item 修改为 this，说明当前 QNode 对应的线程 取消状态\n        // s.item 修改为 null 表示已经有匹配节点了，并且匹配节点拿走了 item 数据\n\n        // 当前请求为 REQUEST 模式时：e == null\n        // s.item 修改为 this，说明当前 QNode 对应的线程 取消状态\n        // s.item != null 且 item != this  表示当前 REQUEST 类型的 Node 已经匹配到 DATA 了 \n        if (x != e)\n            return x;\n        // 超时检查\n        if (timed) {\n            nanos = deadline - System.nanoTime();\n            if (nanos <= 0L) {\n                s.tryCancel(e);\n                continue;\n            }\n        }\n        // 自旋次数减一\n        if (spins > 0)\n            --spins;\n        // 没有自旋次数了，把当前线程封装进去 waiter\n        else if (s.waiter == null)\n            s.waiter = w;\n        // 阻塞\n        else if (!timed)\n            LockSupport.park(this);\n        else if (nanos > spinForTimeoutThreshold)\n            LockSupport.parkNanos(this, nanos);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br")])])])]),n._v(" "),s("h3",{attrs:{id:"操作pool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作pool"}},[n._v("#")]),n._v(" 操作Pool")]),n._v(" "),s("h4",{attrs:{id:"创建方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建方式"}},[n._v("#")]),n._v(" 创建方式")]),n._v(" "),s("h5",{attrs:{id:"executor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[n._v("#")]),n._v(" Executor")]),n._v(" "),s("p",[n._v("存放线程的容器：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private final HashSet<Worker> workers = new HashSet<Worker>();\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("构造方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler)\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("参数介绍：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("corePoolSize：核心线程数，定义了最小可以同时运行的线程数量")])]),n._v(" "),s("li",[s("p",[n._v("maximumPoolSize：最大线程数，当队列中存放的任务达到队列容量时，当前可以同时运行的数量变为最大线程数，创建线程并立即执行最新的任务，与核心线程数之间的差值又叫救急线程数")])]),n._v(" "),s("li",[s("p",[n._v("keepAliveTime：救急线程最大存活时间，当线程池中的线程数量大于 "),s("code",[n._v("corePoolSize")]),n._v(" 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等到 "),s("code",[n._v("keepAliveTime")]),n._v(" 时间超过销毁")])]),n._v(" "),s("li",[s("p",[n._v("unit："),s("code",[n._v("keepAliveTime")]),n._v(" 参数的时间单位")])]),n._v(" "),s("li",[s("p",[n._v("workQueue：阻塞队列，存放被提交但尚未被执行的任务")])]),n._v(" "),s("li",[s("p",[n._v("threadFactory：线程工厂，创建新线程时用到，可以为线程创建时起名字")])]),n._v(" "),s("li",[s("p",[n._v("handler：拒绝策略，线程到达最大线程数仍有新任务时会执行拒绝策略")]),n._v(" "),s("p",[n._v("RejectedExecutionHandler 下有 4 个实现类：")]),n._v(" "),s("ul",[s("li",[n._v("AbortPolicy：让调用者抛出 RejectedExecutionException 异常，"),s("strong",[n._v("默认策略")])]),n._v(" "),s("li",[n._v("CallerRunsPolicy：让调用者运行的调节机制，将某些任务回退到调用者，从而降低新任务的流量")]),n._v(" "),s("li",[n._v("DiscardPolicy：直接丢弃任务，不予任何处理也不抛出异常")]),n._v(" "),s("li",[n._v("DiscardOldestPolicy：放弃队列中最早的任务，把当前任务加入队列中尝试再次提交当前任务")])]),n._v(" "),s("p",[n._v("补充：其他框架拒绝策略")]),n._v(" "),s("ul",[s("li",[n._v("Dubbo：在抛出 RejectedExecutionException 异常前记录日志，并 dump 线程栈信息，方便定位问题")]),n._v(" "),s("li",[n._v("Netty：创建一个新线程来执行任务")]),n._v(" "),s("li",[n._v("ActiveMQ：带超时等待（60s）尝试放入队列")]),n._v(" "),s("li",[n._v("PinPoint：它使用了一个拒绝策略链，会逐一尝试策略链中每种拒绝策略")])])])]),n._v(" "),s("p",[n._v("工作原理：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png",alt:"img"}})]),n._v(" "),s("ol",[s("li",[n._v("创建线程池，这时没有创建线程（"),s("strong",[n._v("懒惰")]),n._v("），等待提交过来的任务请求，调用 execute 方法才会创建线程")]),n._v(" "),s("li",[n._v("当调用 execute() 方法添加一个请求任务时，线程池会做如下判断：\n"),s("ul",[s("li",[n._v("如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务")]),n._v(" "),s("li",[n._v("如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列")]),n._v(" "),s("li",[n._v("如果这时队列满了且正在运行的线程数量还小于 maximumPoolSize，那么会创建非核心线程"),s("strong",[n._v("立刻运行这个任务")]),n._v("，对于阻塞队列中的任务不公平。这是因为创建每个 Worker（线程）对象会绑定一个初始任务，启动 Worker 时会优先执行")]),n._v(" "),s("li",[n._v("如果队列满了且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会启动饱和"),s("strong",[n._v("拒绝策略")]),n._v("来执行")])])]),n._v(" "),s("li",[n._v("当一个线程完成任务时，会从队列中取下一个任务来执行")]),n._v(" "),s("li",[n._v("当一个线程空闲超过一定的时间（keepAliveTime）时，线程池会判断：如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉，所以线程池的所有任务完成后最终会收缩到 corePoolSize 大小")])]),n._v(" "),s("p",[n._v("图片来源：https://space.bilibili.com/457326371/")]),n._v(" "),s("h5",{attrs:{id:"executors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executors"}},[n._v("#")]),n._v(" Executors")]),n._v(" "),s("p",[n._v("Executors 提供了四种线程池的创建：newCachedThreadPool、newFixedThreadPool、newSingleThreadExecutor、newScheduledThreadPool")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("newFixedThreadPool：创建一个拥有 n 个线程的线程池")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("ul",[s("li",[n._v("核心线程数 == 最大线程数（没有救急线程被创建），因此也无需超时时间")]),n._v(" "),s("li",[n._v("LinkedBlockingQueue 是一个单向链表实现的阻塞队列，默认大小为 "),s("code",[n._v("Integer.MAX_VALUE")]),n._v("，也就是无界队列，可以放任意数量的任务，在任务比较多的时候会导致 OOM（内存溢出）")]),n._v(" "),s("li",[n._v("适用于任务量已知，相对耗时的长期任务")])])]),n._v(" "),s("li",[s("p",[n._v("newCachedThreadPool：创建一个可扩容的线程池")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("ul",[s("li",[n._v("核心线程数是 0， 最大线程数是 29 个 1，全部都是救急线程（60s 后可以回收），可能会创建大量线程，从而导致 "),s("strong",[n._v("OOM")])]),n._v(" "),s("li",[n._v("SynchronousQueue 作为阻塞队列，没有容量，对于每一个 take 的线程会阻塞直到有一个 put 的线程放入元素为止（类似一手交钱、一手交货）")]),n._v(" "),s("li",[n._v("适合任务数比较密集，但每个任务执行时间较短的情况")])])]),n._v(" "),s("li",[s("p",[n._v("newSingleThreadExecutor：创建一个只有 1 个线程的单线程池")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("ul",[s("li",[n._v("保证所有任务按照"),s("strong",[n._v("指定顺序执行")]),n._v("，线程数固定为 1，任务数多于 1 时会放入无界队列排队，任务执行完毕，这唯一的线程也不会被释放")])])])]),n._v(" "),s("p",[n._v("对比：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，线程池会新建一个线程，保证池的正常工作")])]),n._v(" "),s("li",[s("p",[n._v("Executors.newSingleThreadExecutor() 线程个数始终为 1，不能修改。FinalizableDelegatedExecutorService 应用的是装饰器模式，只对外暴露了 ExecutorService 接口，因此不能调用 ThreadPoolExecutor 中特有的方法")]),n._v(" "),s("p",[n._v("原因：父类不能直接调用子类中的方法，需要反射或者创建对象的方式，可以调用子类静态方法")])]),n._v(" "),s("li",[s("p",[n._v("Executors.newFixedThreadPool(1) 初始时为 1，可以修改。对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改")])])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-newSingleThreadExecutor.png",alt:"img"}})]),n._v(" "),s("h5",{attrs:{id:"开发要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发要求"}},[n._v("#")]),n._v(" 开发要求")]),n._v(" "),s("p",[n._v("阿里巴巴 Java 开发手册要求：")]),n._v(" "),s("ul",[s("li",[s("p",[s("strong",[n._v("线程资源必须通过线程池提供，不允许在应用中自行显式创建线程")])]),n._v(" "),s("ul",[s("li",[n._v("使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题")]),n._v(" "),s("li",[n._v("如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者过度切换的问题")])])]),n._v(" "),s("li",[s("p",[n._v("线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式更加明确线程池的运行规则，规避资源耗尽的风险")]),n._v(" "),s("p",[n._v("Executors 返回的线程池对象弊端如下：")]),n._v(" "),s("ul",[s("li",[n._v("FixedThreadPool 和 SingleThreadPool：请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM")]),n._v(" "),s("li",[n._v("CacheThreadPool 和 ScheduledThreadPool：允许创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，导致 OOM")])])])]),n._v(" "),s("p",[n._v("创建多大容量的线程池合适？")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("一般来说池中"),s("strong",[n._v("总线程数是核心池线程数量两倍")]),n._v("，确保当核心池有线程停止时，核心池外有线程进入核心池")])]),n._v(" "),s("li",[s("p",[n._v("过小会导致程序不能充分地利用系统资源、容易导致饥饿")])]),n._v(" "),s("li",[s("p",[n._v("过大会导致更多的线程上下文切换，占用更多内存")]),n._v(" "),s("p",[n._v("上下文切换：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态，任务从保存到再加载的过程就是一次上下文切换")])])]),n._v(" "),s("p",[n._v("核心线程数常用公式：")]),n._v(" "),s("ul",[s("li",[s("p",[s("strong",[n._v("CPU 密集型任务 (N+1)：")]),n._v(" 这种任务消耗的是 CPU 资源，可以将核心线程数设置为 N (CPU 核心数) + 1，比 CPU 核心数多出来的一个线程是为了防止线程发生缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 某个核心就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间")]),n._v(" "),s("p",[n._v("CPU 密集型简单理解就是利用 CPU 计算能力的任务比如在内存中对大量数据进行分析")])]),n._v(" "),s("li",[s("p",[s("strong",[n._v("I/O 密集型任务：")]),n._v(" 这种系统 CPU 处于阻塞状态，用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用，因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N 或 CPU 核数/ (1-阻塞系数)，阻塞系数在 0.8~0.9 之间")]),n._v(" "),s("p",[n._v("IO 密集型就是涉及到网络读取，文件读取此类任务 ，特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上")])])]),n._v(" "),s("h4",{attrs:{id:"提交方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交方法"}},[n._v("#")]),n._v(" 提交方法")]),n._v(" "),s("p",[n._v("ExecutorService 类 API：")]),n._v(" "),s("table",[s("thead",[s("tr",[s("th",[n._v("方法")]),n._v(" "),s("th",[n._v("说明")])])]),n._v(" "),s("tbody",[s("tr",[s("td",[n._v("void execute(Runnable command)")]),n._v(" "),s("td",[n._v("执行任务（Executor 类 API）")])]),n._v(" "),s("tr",[s("td",[n._v("Future<?> submit(Runnable task)")]),n._v(" "),s("td",[n._v("提交任务 task()")])]),n._v(" "),s("tr",[s("td",[n._v("Future submit(Callable"),s("T",[n._v(" task)")])],1),n._v(" "),s("td",[n._v("提交任务 task，用返回值 Future 获得任务执行结果")])]),n._v(" "),s("tr",[s("td",[n._v("List<Future"),s("T",[n._v("> invokeAll(Collection<? extends Callable"),s("T",[n._v("> tasks)")])],1)],1),n._v(" "),s("td",[n._v("提交 tasks 中所有任务")])]),n._v(" "),s("tr",[s("td",[n._v("List<Future"),s("T",[n._v("> invokeAll(Collection<? extends Callable"),s("T",[n._v("> tasks, long timeout, TimeUnit unit)")])],1)],1),n._v(" "),s("td",[n._v("提交 tasks 中所有任务，超时时间针对所有task，超时会取消没有执行完的任务，并抛出超时异常")])]),n._v(" "),s("tr",[s("td",[n._v("T invokeAny(Collection<? extends Callable"),s("T",[n._v("> tasks)")])],1),n._v(" "),s("td",[n._v("提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消")])])])]),n._v(" "),s("p",[n._v("execute 和 submit 都属于线程池的方法，对比：")]),n._v(" "),s("ul",[s("li",[n._v("execute 只能执行 Runnable 类型的任务，没有返回值； submit 既能提交 Runnable 类型任务也能提交 Callable 类型任务，底层是"),s("strong",[n._v("封装成 FutureTask，然后调用 execute 执行")])]),n._v(" "),s("li",[n._v("execute 会直接抛出任务执行时的异常，submit 会吞掉异常，可通过 Future 的 get 方法将任务执行时的异常重新抛出")])]),n._v(" "),s("h4",{attrs:{id:"关闭方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭方法"}},[n._v("#")]),n._v(" 关闭方法")]),n._v(" "),s("p",[n._v("ExecutorService 类 API：")]),n._v(" "),s("table",[s("thead",[s("tr",[s("th",[n._v("方法")]),n._v(" "),s("th",[n._v("说明")])])]),n._v(" "),s("tbody",[s("tr",[s("td",[n._v("void shutdown()")]),n._v(" "),s("td",[n._v("线程池状态变为 SHUTDOWN，等待任务执行完后关闭线程池，不会接收新任务，但已提交任务会执行完，而且也可以添加线程（不绑定任务）")])]),n._v(" "),s("tr",[s("td",[n._v("List"),s("Runnable",[n._v(" shutdownNow()")])],1),n._v(" "),s("td",[n._v("线程池状态变为 STOP，用 interrupt 中断正在执行的任务，直接关闭线程池，不会接收新任务，会将队列中的任务返回")])]),n._v(" "),s("tr",[s("td",[n._v("boolean isShutdown()")]),n._v(" "),s("td",[n._v("不在 RUNNING 状态的线程池，此执行者已被关闭，方法返回 true")])]),n._v(" "),s("tr",[s("td",[n._v("boolean isTerminated()")]),n._v(" "),s("td",[n._v("线程池状态是否是 TERMINATED，如果所有任务在关闭后完成，返回 true")])]),n._v(" "),s("tr",[s("td",[n._v("boolean awaitTermination(long timeout, TimeUnit unit)")]),n._v(" "),s("td",[n._v("调用 shutdown 后，由于调用线程不会等待所有任务运行结束，如果它想在线程池 TERMINATED 后做些事情，可以利用此方法等待")])])])]),n._v(" "),s("h4",{attrs:{id:"处理异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理异常"}},[n._v("#")]),n._v(" 处理异常")]),n._v(" "),s("p",[n._v("execute 会直接抛出任务执行时的异常，submit 会吞掉异常，有两种处理方法")]),n._v(" "),s("p",[n._v("方法 1：主动捉异常")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('ExecutorService executorService = Executors.newFixedThreadPool(1);\npool.submit(() -> {\n    try {\n        System.out.println("task1");\n        int i = 1 / 0;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n});\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("方法 2：使用 Future 对象")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('ExecutorService executorService = Executors.newFixedThreadPool(1);\nFuture<?> future = pool.submit(() -> {\n    System.out.println("task1");\n    int i = 1 / 0;\n    return true;\n});\nSystem.out.println(future.get());\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("h3",{attrs:{id:"工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[n._v("#")]),n._v(" 工作原理")]),n._v(" "),s("h4",{attrs:{id:"状态信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态信息"}},[n._v("#")]),n._v(" 状态信息")]),n._v(" "),s("p",[n._v("ThreadPoolExecutor 使用 int 的"),s("strong",[n._v("高 3 位来表示线程池状态，低 29 位表示线程数量")]),n._v("。这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 CAS 原子操作进行赋值")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("状态表示：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 高3位：表示当前线程池运行状态，除去高3位之后的低位：表示当前线程池中所拥有的线程数量\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n// 表示在 ctl 中，低 COUNT_BITS 位，是用于存放当前线程数量的位\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\n// 低 COUNT_BITS 位所能表达的最大数值，000 11111111111111111111 => 5亿多\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png",alt:"img"}})])]),n._v(" "),s("li",[s("p",[n._v("四种状态：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 111 000000000000000000，转换成整数后其实就是一个【负数】\nprivate static final int RUNNING    = -1 << COUNT_BITS;\n// 000 000000000000000000\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\n// 001 000000000000000000\nprivate static final int STOP       =  1 << COUNT_BITS;\n// 010 000000000000000000\nprivate static final int TIDYING    =  2 << COUNT_BITS;\n// 011 000000000000000000\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[n._v("状态")]),n._v(" "),s("th",[n._v("高3位")]),n._v(" "),s("th",[n._v("接收新任务")]),n._v(" "),s("th",[n._v("处理阻塞任务队列")]),n._v(" "),s("th",[n._v("说明")])])]),n._v(" "),s("tbody",[s("tr",[s("td",[n._v("RUNNING")]),n._v(" "),s("td",[n._v("111")]),n._v(" "),s("td",[n._v("Y")]),n._v(" "),s("td",[n._v("Y")]),n._v(" "),s("td")]),n._v(" "),s("tr",[s("td",[n._v("SHUTDOWN")]),n._v(" "),s("td",[n._v("000")]),n._v(" "),s("td",[n._v("N")]),n._v(" "),s("td",[n._v("Y")]),n._v(" "),s("td",[n._v("不接收新任务，但处理阻塞队列剩余任务")])]),n._v(" "),s("tr",[s("td",[n._v("STOP")]),n._v(" "),s("td",[n._v("001")]),n._v(" "),s("td",[n._v("N")]),n._v(" "),s("td",[n._v("N")]),n._v(" "),s("td",[n._v("中断正在执行的任务，并抛弃阻塞队列任务")])]),n._v(" "),s("tr",[s("td",[n._v("TIDYING")]),n._v(" "),s("td",[n._v("010")]),n._v(" "),s("td",[n._v("-")]),n._v(" "),s("td",[n._v("-")]),n._v(" "),s("td",[n._v("任务全执行完毕，活动线程为 0 即将进入终结")])]),n._v(" "),s("tr",[s("td",[n._v("TERMINATED")]),n._v(" "),s("td",[n._v("011")]),n._v(" "),s("td",[n._v("-")]),n._v(" "),s("td",[n._v("-")]),n._v(" "),s("td",[n._v("终止状态")])])])])]),n._v(" "),s("li",[s("p",[n._v("获取当前线程池运行状态：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// ~CAPACITY = ~000 11111111111111111111 = 111 000000000000000000000（取反）\n// c == ctl = 111 000000000000000000111\n// 111 000000000000000000111\n// 111 000000000000000000000\n// 111 000000000000000000000    获取到了运行状态\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("获取当前线程池线程数量：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//        c = 111 000000000000000000111\n// CAPACITY = 000 111111111111111111111\n//            000 000000000000000000111 => 7\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("重置当前线程池状态 ctl：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// rs 表示线程池状态，wc 表示当前线程池中 worker（线程）数量，相与以后就是合并后的状态\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("比较当前线程池 ctl 所表示的状态：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 比较当前线程池 ctl 所表示的状态，是否小于某个状态 s\n// 状态对比：RUNNING < SHUTDOWN < STOP < TIDYING < TERMINATED\nprivate static boolean runStateLessThan(int c, int s) { return c < s; }\n// 比较当前线程池 ctl 所表示的状态，是否大于等于某个状态s\nprivate static boolean runStateAtLeast(int c, int s) { return c >= s; }\n// 小于 SHUTDOWN 的一定是 RUNNING，SHUTDOWN == 0\nprivate static boolean isRunning(int c) { return c < SHUTDOWN; }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("设置线程池 ctl：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 使用 CAS 方式 让 ctl 值 +1 ，成功返回 true, 失败返回 false\nprivate boolean compareAndIncrementWorkerCount(int expect) {\n    return ctl.compareAndSet(expect, expect + 1);\n}\n// 使用 CAS 方式 让 ctl 值 -1 ，成功返回 true, 失败返回 false\nprivate boolean compareAndDecrementWorkerCount(int expect) {\n    return ctl.compareAndSet(expect, expect - 1);\n}\n// 将 ctl 值减一，do while 循环会一直重试，直到成功为止\nprivate void decrementWorkerCount() {\n    do {} while (!compareAndDecrementWorkerCount(ctl.get()));\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])])])]),n._v(" "),s("h4",{attrs:{id:"成员属性-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员属性-2"}},[n._v("#")]),n._v(" 成员属性")]),n._v(" "),s("p",[n._v("成员变量")]),n._v(" "),s("ul",[s("li",[s("p",[s("strong",[n._v("线程池中存放 Worker 的容器")]),n._v("：线程池没有初始化，直接往池中加线程即可")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private final HashSet<Worker> workers = new HashSet<Worker>();\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("线程全局锁：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 增加减少 worker 或者时修改线程池运行状态需要持有 mainLock\nprivate final ReentrantLock mainLock = new ReentrantLock();\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("可重入锁的条件变量：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 当外部线程调用 awaitTermination() 方法时，会等待当前线程池状态为 Termination 为止\nprivate final Condition termination = mainLock.newCondition()\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("线程池相关参数：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private volatile int corePoolSize;              // 核心线程数量\nprivate volatile int maximumPoolSize;           // 线程池最大线程数量\nprivate volatile long keepAliveTime;            // 空闲线程存活时间\nprivate volatile ThreadFactory threadFactory;   // 创建线程时使用的线程工厂，默认是 DefaultThreadFactory\nprivate final BlockingQueue<Runnable> workQueue;// 【超过核心线程提交任务就放入 阻塞队列】\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private volatile RejectedExecutionHandler handler;  // 拒绝策略，juc包提供了4中方式\nprivate static final RejectedExecutionHandler defaultHandler = new AbortPolicy();// 默认策略\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("记录线程池相关属性的数值：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private int largestPoolSize;        // 记录线程池生命周期内线程数最大值\nprivate long completedTaskCount;    // 记录线程池所完成任务总数，当某个 worker 退出时将完成的任务累加到该属性\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("控制"),s("strong",[n._v("核心线程数量内的线程是否可以被回收")]),n._v("：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// false（默认）代表不可以，为 true 时核心线程空闲超过 keepAliveTime 也会被回收\n// allowCoreThreadTimeOut(boolean value) 方法可以设置该值\nprivate volatile boolean allowCoreThreadTimeOut;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])])])]),n._v(" "),s("p",[n._v("内部类：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("Worker 类："),s("strong",[n._v("每个 Worker 对象会绑定一个初始任务")]),n._v("，启动 Worker 时优先执行，这也是造成线程池不公平的原因。Worker 继承自 AQS，本身具有锁的特性，采用独占锁模式，state = 0 表示未被占用，> 0 表示被占用，< 0 表示初始状态不能被抢锁")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private final class Worker extends AbstractQueuedSynchronizer implements Runnable {\n    final Thread thread;            // worker 内部封装的工作线程\n    Runnable firstTask;             // worker 第一个执行的任务，普通的 Runnable 实现类或者是 FutureTask\n    volatile long completedTasks;   // 记录当前 worker 所完成任务数量\n    \n    // 构造方法\n    Worker(Runnable firstTask) {\n        // 设置AQS独占模式为初始化中状态，这个状态不能被抢占锁\n        setState(-1);\n        // firstTask不为空时，当worker启动后，内部线程会优先执行firstTask，执行完后会到queue中去获取下个任务\n        this.firstTask = firstTask;\n        // 使用线程工厂创建一个线程，并且【将当前worker指定为Runnable】，所以thread启动时会调用 worker.run()\n        this.thread = getThreadFactory().newThread(this);\n    }\n    // 【不可重入锁】\n    protected boolean tryAcquire(int unused) {\n        if (compareAndSetState(0, 1)) {\n            setExclusiveOwnerThread(Thread.currentThread());\n            return true;\n        }\n        return false;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public Thread newThread(Runnable r) {\n    // 将当前 worker 指定为 thread 的执行方法，线程调用 start 会调用 r.run()\n    Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);\n    if (t.isDaemon())\n        t.setDaemon(false);\n    if (t.getPriority() != Thread.NORM_PRIORITY)\n        t.setPriority(Thread.NORM_PRIORITY);\n    return t;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("拒绝策略相关的内部类")])])]),n._v(" "),s("h4",{attrs:{id:"成员方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员方法"}},[n._v("#")]),n._v(" 成员方法")]),n._v(" "),s("h5",{attrs:{id:"提交方法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交方法-2"}},[n._v("#")]),n._v(" 提交方法")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("AbstractExecutorService#submit()：提交任务，"),s("strong",[n._v("把 Runnable 或 Callable 任务封装成 FutureTask 执行")]),n._v("，可以通过方法返回的任务对象，调用 get 阻塞获取任务执行的结果或者异常，源码分析在笔记的 Future 部分")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public Future<?> submit(Runnable task) {\n    // 空指针异常\n    if (task == null) throw new NullPointerException();\n    // 把 Runnable 封装成未来任务对象，执行结果就是 null，也可以通过参数指定 FutureTask#get 返回数据\n    RunnableFuture<Void> ftask = newTaskFor(task, null);\n    // 执行方法\n    execute(ftask);\n    return ftask;\n}\npublic <T> Future<T> submit(Callable<T> task) {\n    if (task == null) throw new NullPointerException();\n    // 把 Callable 封装成未来任务对象\n    RunnableFuture<T> ftask = newTaskFor(task);\n    // 执行方法\n    execute(ftask); \n    // 返回未来任务对象，用来获取返回值\n    return ftask;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {\n    // Runnable 封装成 FutureTask，【指定返回值】\n    return new FutureTask<T>(runnable, value);\n}\nprotected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n    // Callable 直接封装成 FutureTask\n    return new FutureTask<T>(callable);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("execute()：执行任务，"),s("strong",[n._v("但是没有返回值，没办法获取任务执行结果")]),n._v("，出现异常会直接抛出任务执行时的异常。根据线程池中的线程数，选择添加任务时的处理方式")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// command 可以是普通的 Runnable 实现类，也可以是 FutureTask，不能是 Callable\npublic void execute(Runnable command) {\n    // 非空判断\n    if (command == null)\n        throw new NullPointerException();\n    // 获取 ctl 最新值赋值给 c，ctl 高 3 位表示线程池状态，低位表示当前线程池线程数量。\n    int c = ctl.get();\n    // 【1】当前线程数量小于核心线程数，此次提交任务直接创建一个新的 worker，线程池中多了一个新的线程\n    if (workerCountOf(c) < corePoolSize) {\n        // addWorker 为创建线程的过程，会创建 worker 对象并且将 command 作为 firstTask，优先执行\n        if (addWorker(command, true))\n            return;\n        \n        // 执行到这条语句，说明 addWorker 一定是失败的，存在并发现象或者线程池状态被改变，重新获取状态\n        // SHUTDOWN 状态下也有可能创建成功，前提 firstTask == null 而且当前 queue 不为空（特殊情况）\n        c = ctl.get();\n    }\n    // 【2】执行到这说明当前线程数量已经达到核心线程数量 或者 addWorker 失败\n    //  判断当前线程池是否处于running状态，成立就尝试将 task 放入到 workQueue 中\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        // 条件一成立说明线程池状态被外部线程给修改了，可能是执行了 shutdown() 方法，该状态不能接收新提交的任务\n        // 所以要把刚提交的任务删除，删除成功说明提交之后线程池中的线程还未消费（处理）该任务\n        if (!isRunning(recheck) && remove(command))\n            // 任务出队成功，走拒绝策略\n            reject(command);\n        // 执行到这说明线程池是 running 状态，获取线程池中的线程数量，判断是否是 0\n        // 【担保机制】，保证线程池在 running 状态下，最起码得有一个线程在工作\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    // 【3】offer失败说明queue满了\n    // 如果线程数量尚未达到 maximumPoolSize，会创建非核心 worker 线程直接执行 command，【这也是不公平的原因】\n    // 如果当前线程数量达到 maximumPoolSiz，这里 addWorker 也会失败，走拒绝策略\n    else if (!addWorker(command, false))\n        reject(command);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"添加线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加线程"}},[n._v("#")]),n._v(" 添加线程")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("prestartAllCoreThreads()："),s("strong",[n._v("提前预热")]),n._v("，创建所有的核心线程")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int prestartAllCoreThreads() {\n    int n = 0;\n    while (addWorker(null, true))\n        ++n;\n    return n;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("addWorker()："),s("strong",[n._v("添加线程到线程池")]),n._v("，返回 true 表示创建 Worker 成功，且线程启动。首先判断线程池是否允许添加线程，允许就让线程数量 + 1，然后去创建 Worker 加入线程池")]),n._v(" "),s("p",[n._v("注意：SHUTDOWN 状态也能添加线程，但是要求新加的 Woker 没有 firstTask，而且当前 queue 不为空，所以创建一个线程来帮助线程池执行队列中的任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// core == true 表示采用核心线程数量限制，false 表示采用 maximumPoolSize\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    // 自旋【判断当前线程池状态是否允许创建线程】，允许就设置线程数量 + 1\n    retry:\n    for (;;) {\n        // 获取 ctl 的值\n        int c = ctl.get();\n        // 获取当前线程池运行状态\n        int rs = runStateOf(c); \n        \n        // 判断当前线程池状态【是否允许添加线程】\n        \n        // 当前线程池是 SHUTDOWN 状态，但是队列里面还有任务尚未处理完，需要处理完 queue 中的任务\n        // 【不允许再提交新的 task，所以 firstTask 为空，但是可以继续添加 worker】\n        if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))\n            return false;\n        for (;;) {\n            // 获取线程池中线程数量\n            int wc = workerCountOf(c);\n            // 条件一一般不成立，CAPACITY是5亿多，根据 core 判断使用哪个大小限制线程数量，超过了返回 false\n            if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            // 记录线程数量已经加 1，类比于申请到了一块令牌，条件失败说明其他线程修改了数量\n            if (compareAndIncrementWorkerCount(c))\n                // 申请成功，跳出了 retry 这个 for 自旋\n                break retry;\n            // CAS 失败，没有成功的申请到令牌\n            c = ctl.get();\n            // 判断当前线程池状态是否发生过变化，被其他线程修改了，可能其他线程调用了 shutdown() 方法\n            if (runStateOf(c) != rs)\n                // 返回外层循环检查是否能创建线程，在 if 语句中返回 false\n                continue retry;\n           \n        }\n    }\n    \n    //【令牌申请成功，开始创建线程】\n    \n    // 运行标记，表示创建的 worker 是否已经启动，false未启动  true启动\n    boolean workerStarted = false;\n    // 添加标记，表示创建的 worker 是否添加到池子中了，默认false未添加，true是添加。\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        // 【创建 Worker，底层通过线程工厂 newThread 方法创建执行线程，指定了首先执行的任务】\n        w = new Worker(firstTask);\n        // 将新创建的 worker 节点中的线程赋值给 t\n        final Thread t = w.thread;\n        // 这里的判断为了防止 程序员自定义的 ThreadFactory 实现类有 bug，创造不出线程\n        if (t != null) {\n            final ReentrantLock mainLock = this.mainLock;\n            // 加互斥锁，要添加 worker 了\n            mainLock.lock();\n            try {\n                // 获取最新线程池运行状态保存到 rs\n                int rs = runStateOf(ctl.get());\n                // 判断线程池是否为RUNNING状态，不是再【判断当前是否为SHUTDOWN状态且firstTask为空，特殊情况】\n                if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {\n                    // 当线程start后，线程isAlive会返回true，这里还没开始启动线程，如果被启动了就需要报错\n                    if (t.isAlive())\n                        throw new IllegalThreadStateException();\n                    \n                    //【将新建的 Worker 添加到线程池中】\n                    workers.add(w);\n                    int s = workers.size();\n                    // 当前池中的线程数量是一个新高，更新 largestPoolSize\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    // 添加标记置为 true\n                    workerAdded = true;\n                }\n            } finally {\n                // 解锁啊\n                mainLock.unlock();\n            }\n            // 添加成功就【启动线程执行任务】\n            if (workerAdded) {\n                // Thread 类中持有 Runnable 任务对象，调用的是 Runnable 的 run ，也就是 FutureTask\n                t.start();\n                // 运行标记置为 true\n                workerStarted = true;\n            }\n        }\n    } finally {\n        // 如果启动线程失败，做清理工作\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    // 返回新创建的线程是否启动\n    return workerStarted;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("addWorkerFailed()：清理任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private void addWorkerFailed(Worker w) {\n    final ReentrantLock mainLock = this.mainLock;\n    // 持有线程池全局锁，因为操作的是线程池相关的东西\n    mainLock.lock();\n    try {\n        //条件成立需要将 worker 在 workers 中清理出去。\n        if (w != null)\n            workers.remove(w);\n        // 将线程池计数 -1，相当于归还令牌。\n        decrementWorkerCount();\n        // 尝试停止线程池\n        tryTerminate();\n    } finally {\n        //释放线程池全局锁。\n        mainLock.unlock();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"运行方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行方法"}},[n._v("#")]),n._v(" 运行方法")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("Worker#run：Worker 实现了 Runnable 接口，当线程启动时，会调用 Worker 的 run() 方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void run() {\n    // ThreadPoolExecutor#runWorker()\n    runWorker(this);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("runWorker()：线程启动就要"),s("strong",[n._v("执行任务")]),n._v("，会一直 while 循环获取任务并执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("final void runWorker(Worker w) {\n    Thread wt = Thread.currentThread(); \n    // 获取 worker 的 firstTask\n    Runnable task = w.firstTask;\n    // 引用置空，【防止复用该线程时重复执行该任务】\n    w.firstTask = null;\n    // 初始化 worker 时设置 state = -1，表示不允许抢占锁\n    // 这里需要设置 state = 0 和 exclusiveOwnerThread = null，开始独占模式抢锁\n    w.unlock();\n    // true 表示发生异常退出，false 表示正常退出。\n    boolean completedAbruptly = true;\n    try {\n        // firstTask 不是 null 就直接运行，否则去 queue 中获取任务\n        // 【getTask 如果是阻塞获取任务，会一直阻塞在take方法，直到获取任务，不会走返回null的逻辑】\n        while (task != null || (task = getTask()) != null) {\n            // worker 加锁，shutdown 时会判断当前 worker 状态，【根据独占锁状态判断是否空闲】\n            w.lock();\n            \n            // 说明线程池状态大于 STOP，目前处于 STOP/TIDYING/TERMINATION，此时给线程一个中断信号\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 // 说明线程处于 RUNNING 或者 SHUTDOWN 状态，清除打断标记\n                 (Thread.interrupted() && runStateAtLeast(ctl.get(), STOP))) && !wt.isInterrupted())\n                // 中断线程，设置线程的中断标志位为 true\n                wt.interrupt();\n            try {\n                // 钩子方法，【任务执行的前置处理】\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    // 【执行任务】\n                    task.run();\n                } catch (Exception x) {\n                    //.....\n                } finally {\n                    // 钩子方法，【任务执行的后置处理】\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                task = null;        // 将局部变量task置为null，代表任务执行完成\n                w.completedTasks++; // 更新worker完成任务数量\n                w.unlock();         // 解锁\n            }\n        }\n        // getTask()方法返回null时会走到这里，表示queue为空并且线程空闲超过保活时间，【当前线程执行退出逻辑】\n        completedAbruptly = false;  \n    } finally {\n        // 正常退出 completedAbruptly = false\n        // 异常退出 completedAbruptly = true，【从 task.run() 内部抛出异常】时，跳到这一行\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("unlock()：重置锁")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void unlock() { release(1); }\n// 外部不会直接调用这个方法 这个方法是 AQS 内调用的，外部调用 unlock 时触发此方法\nprotected boolean tryRelease(int unused) {\n    setExclusiveOwnerThread(null);      // 设置持有者为 null\n    setState(0);                        // 设置 state = 0\n    return true;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("getTask()：获取任务，线程空闲时间超过 keepAliveTime 就会被回收，判断的依据是"),s("strong",[n._v("当前线程阻塞获取任务超过保活时间")]),n._v("，方法返回 null 就代表当前线程要被回收了，返回到 runWorker 执行线程退出逻辑。线程池具有担保机制，对于 RUNNING 状态下的超时回收，要保证线程池中最少有一个线程运行，或者任务阻塞队列已经是空")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private Runnable getTask() {\n    // 超时标记，表示当前线程获取任务是否超时，true 表示已超时\n    boolean timedOut = false; \n    for (;;) {\n        int c = ctl.get();\n        // 获取线程池当前运行状态\n        int rs = runStateOf(c);\n        \n        // 【tryTerminate】打断线程后执行到这，此时线程池状态为STOP或者线程池状态为SHUTDOWN并且队列已经是空\n        // 所以下面的 if 条件一定是成立的，可以直接返回 null，线程就应该退出了\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            // 使用 CAS 自旋的方式让 ctl 值 -1\n            decrementWorkerCount();\n            return null;\n        }\n        \n        // 获取线程池中的线程数量\n        int wc = workerCountOf(c);\n\n        // 线程没有明确的区分谁是核心或者非核心线程，是根据当前池中的线程数量判断\n        \n        // timed = false 表示当前这个线程 获取task时不支持超时机制的，当前线程会使用 queue.take() 阻塞获取\n        // timed = true 表示当前这个线程 获取task时支持超时机制，使用 queue.poll(xxx,xxx) 超时获取\n        // 条件一代表允许回收核心线程，那就无所谓了，全部线程都执行超时回收\n        // 条件二成立说明线程数量大于核心线程数，当前线程认为是非核心线程，有保活时间，去超时获取任务\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n        \n        // 如果线程数量是否超过最大线程数，直接回收\n        // 如果当前线程【允许超时回收并且已经超时了】，就应该被回收了，由于【担保机制】还要做判断：\n        //    wc > 1 说明线程池还用其他线程，当前线程可以直接回收\n        //    workQueue.isEmpty() 前置条件是 wc = 1，【如果当前任务队列也是空了，最后一个线程就可以退出】\n        if ((wc > maximumPoolSize || (timed && timedOut)) && (wc > 1 || workQueue.isEmpty())) {\n            // 使用 CAS 机制将 ctl 值 -1 ,减 1 成功的线程，返回 null，代表可以退出\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            continue;\n        }\n\n        try {\n            // 根据当前线程是否需要超时回收，【选择从队列获取任务的方法】是超时获取或者阻塞获取\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : workQueue.take();\n            // 获取到任务返回任务，【阻塞获取会阻塞到获取任务为止】，不会返回 null\n            if (r != null)\n                return r;\n            // 获取任务为 null 说明超时了，将超时标记设置为 true，下次自旋时返 null\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            // 阻塞线程被打断后超时标记置为 false，【说明被打断不算超时】，要继续获取，直到超时或者获取到任务\n            // 如果线程池 SHUTDOWN 状态下的打断，会在循环获取任务前判断，返回 null\n            timedOut = false;\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("processWorkerExit()："),s("strong",[n._v("线程退出线程池")]),n._v("，也有担保机制，保证队列中的任务被执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 正常退出 completedAbruptly = false，异常退出为 true\nprivate void processWorkerExit(Worker w, boolean completedAbruptly) {\n    // 条件成立代表当前 worker 是发生异常退出的，task 任务执行过程中向上抛出异常了\n    if (completedAbruptly) \n        // 从异常时到这里 ctl 一直没有 -1，需要在这里 -1\n        decrementWorkerCount();\n\n    final ReentrantLock mainLock = this.mainLock;\n    // 加锁\n    mainLock.lock();\n    try {\n        // 将当前 worker 完成的 task 数量，汇总到线程池的 completedTaskCount\n        completedTaskCount += w.completedTasks;\n        // 将 worker 从线程池中移除\n        workers.remove(w);\n    } finally {\n        mainLock.unlock();  // 解锁\n    }\n    // 尝试停止线程池，唤醒下一个线程\n    tryTerminate();\n\n    int c = ctl.get();\n    // 线程池不是停止状态就应该有线程运行【担保机制】\n    if (runStateLessThan(c, STOP)) {\n        // 正常退出的逻辑，是对空闲线程回收，不是执行出错\n        if (!completedAbruptly) {\n            // 根据是否回收核心线程确定【线程池中的线程数量最小值】\n            int min = allowCoreThreadTimeOut ? 0 : corePoolSize;\n            // 最小值为 0，但是线程队列不为空，需要一个线程来完成任务担保机制\n            if (min == 0 && !workQueue.isEmpty())\n                min = 1;\n            // 线程池中的线程数量大于最小值可以直接返回\n            if (workerCountOf(c) >= min)\n                return;\n        }\n        // 执行 task 时发生异常，有个线程因为异常终止了，需要添加\n        // 或者线程池中的数量小于最小值，这里要创建一个新 worker 加进线程池\n        addWorker(null, false);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"停止方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#停止方法"}},[n._v("#")]),n._v(" 停止方法")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("shutdown()：停止线程池")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void shutdown() {\n    final ReentrantLock mainLock = this.mainLock;\n    // 获取线程池全局锁\n    mainLock.lock();\n    try {\n        checkShutdownAccess();\n        // 设置线程池状态为 SHUTDOWN，如果线程池状态大于 SHUTDOWN，就不会设置直接返回\n        advanceRunState(SHUTDOWN);\n        // 中断空闲线程\n        interruptIdleWorkers();\n        // 空方法，子类可以扩展\n        onShutdown(); \n    } finally {\n        // 释放线程池全局锁\n        mainLock.unlock();\n    }\n    tryTerminate();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("interruptIdleWorkers()：shutdown 方法会"),s("strong",[n._v("中断所有空闲线程")]),n._v("，根据是否可以获取 AQS 独占锁判断是否处于工作状态。线程之所以空闲是因为阻塞队列没有任务，不会中断正在运行的线程，所以 shutdown 方法会让所有的任务执行完毕")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// onlyOne == true 说明只中断一个线程 ，false 则中断所有线程\nprivate void interruptIdleWorkers(boolean onlyOne) {\n    final ReentrantLock mainLock = this.mainLock;\n    / /持有全局锁\n    mainLock.lock();\n    try {\n        // 遍历所有 worker\n        for (Worker w : workers) {\n            // 获取当前 worker 的线程\n            Thread t = w.thread;\n            // 条件一成立：说明当前迭代的这个线程尚未中断\n            // 条件二成立：说明【当前worker处于空闲状态】，阻塞在poll或者take，因为worker执行task时是要加锁的\n            //           每个worker有一个独占锁，w.tryLock()尝试加锁，加锁成功返回 true\n            if (!t.isInterrupted() && w.tryLock()) {\n                try {\n                    // 中断线程，处于 queue 阻塞的线程会被唤醒，进入下一次自旋，返回 null，执行退出相逻辑\n                    t.interrupt();\n                } catch (SecurityException ignore) {\n                } finally {\n                    // 释放worker的独占锁\n                    w.unlock();\n                }\n            }\n            // false，代表中断所有的线程\n            if (onlyOne)\n                break;\n        }\n\n    } finally {\n        // 释放全局锁\n        mainLock.unlock();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("shutdownNow()：直接关闭线程池，不会等待任务执行完成")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public List<Runnable> shutdownNow() {\n    // 返回值引用\n    List<Runnable> tasks;\n    final ReentrantLock mainLock = this.mainLock;\n    // 获取线程池全局锁\n    mainLock.lock();\n    try {\n        checkShutdownAccess();\n        // 设置线程池状态为STOP\n        advanceRunState(STOP);\n        // 中断线程池中【所有线程】\n        interruptWorkers();\n        // 从阻塞队列中导出未处理的task\n        tasks = drainQueue();\n    } finally {\n        mainLock.unlock();\n    }\n\n    tryTerminate();\n    // 返回当前任务队列中 未处理的任务。\n    return tasks;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("tryTerminate()：设置为 TERMINATED 状态 if either (SHUTDOWN and pool and queue empty) or (STOP and pool empty)")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("final void tryTerminate() {\n    for (;;) {\n        // 获取 ctl 的值\n        int c = ctl.get();\n        // 线程池正常，或者有其他线程执行了状态转换的方法，当前线程直接返回\n        if (isRunning(c) || runStateAtLeast(c, TIDYING) ||\n            // 线程池是 SHUTDOWN 并且任务队列不是空，需要去处理队列中的任务\n            (runStateOf(c) == SHUTDOWN && ! workQueue.isEmpty()))\n            return;\n        \n        // 执行到这里说明线程池状态为 STOP 或者线程池状态为 SHUTDOWN 并且队列已经是空\n        // 判断线程池中线程的数量\n        if (workerCountOf(c) != 0) {\n            // 【中断一个空闲线程】，在 queue.take() | queue.poll() 阻塞空闲\n            // 唤醒后的线程会在getTask()方法返回null，\n            // 执行 processWorkerExit 退出逻辑时会再次调用 tryTerminate() 唤醒下一个空闲线程\n            interruptIdleWorkers(ONLY_ONE);\n            return;\n        }\n        // 池中的线程数量为 0 来到这里\n        final ReentrantLock mainLock = this.mainLock;\n        // 加全局锁\n        mainLock.lock();\n        try {\n            // 设置线程池状态为 TIDYING 状态，线程数量为 0\n            if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) {\n                try {\n                    // 结束线程池\n                    terminated();\n                } finally {\n                    // 设置线程池状态为TERMINATED状态。\n                    ctl.set(ctlOf(TERMINATED, 0));\n                    // 【唤醒所有调用 awaitTermination() 方法的线程】\n                    termination.signalAll();\n                }\n                return;\n            }\n        } finally {\n            // 释放线程池全局锁\n            mainLock.unlock();\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br")])])])]),n._v(" "),s("h4",{attrs:{id:"future"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#future"}},[n._v("#")]),n._v(" Future")]),n._v(" "),s("h5",{attrs:{id:"线程使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程使用"}},[n._v("#")]),n._v(" 线程使用")]),n._v(" "),s("p",[n._v("FutureTask 未来任务对象，继承 Runnable、Future 接口，用于包装 Callable 对象，实现任务的提交")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args) throws ExecutionException, InterruptedException {\n    FutureTask<String> task = new FutureTask<>(new Callable<String>() {\n        @Override\n        public String call() throws Exception {\n            return "Hello World";\n        }\n    });\n    new Thread(task).start();   //启动线程\n    String msg = task.get();    //获取返回任务数据\n    System.out.println(msg);\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("构造方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public FutureTask(Callable<V> callable){\n    this.callable = callable;   // 属性注入\n    this.state = NEW;           // 任务状态设置为 new\n}\npublic FutureTask(Runnable runnable, V result) {\n    // 适配器模式\n    this.callable = Executors.callable(runnable, result);\n    this.state = NEW;       \n}\npublic static <T> Callable<T> callable(Runnable task, T result) {\n    if (task == null) throw new NullPointerException();\n    // 使用装饰者模式将 runnable 转换成 callable 接口，外部线程通过 get 获取\n    // 当前任务执行结果时，结果可能为 null 也可能为传进来的值，【传进来什么返回什么】\n    return new RunnableAdapter<T>(task, result);\n}\nstatic final class RunnableAdapter<T> implements Callable<T> {\n    final Runnable task;\n    final T result;\n    // 构造方法\n    RunnableAdapter(Runnable task, T result) {\n        this.task = task;\n        this.result = result;\n    }\n    public T call() {\n        // 实则调用 Runnable#run 方法\n        task.run();\n        // 返回值为构造 FutureTask 对象时传入的返回值或者是 null\n        return result;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br")])]),s("h5",{attrs:{id:"成员属性-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员属性-3"}},[n._v("#")]),n._v(" 成员属性")]),n._v(" "),s("p",[n._v("FutureTask 类的成员属性：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("任务状态：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 表示当前task状态\nprivate volatile int state;\n// 当前任务尚未执行\nprivate static final int NEW          = 0;\n// 当前任务正在结束，尚未完全结束，一种临界状态\nprivate static final int COMPLETING   = 1;\n// 当前任务正常结束\nprivate static final int NORMAL       = 2;\n// 当前任务执行过程中发生了异常，内部封装的 callable.run() 向上抛出异常了\nprivate static final int EXCEPTIONAL  = 3;\n// 当前任务被取消\nprivate static final int CANCELLED    = 4;\n// 当前任务中断中\nprivate static final int INTERRUPTING = 5;\n// 当前任务已中断\nprivate static final int INTERRUPTED  = 6;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("任务对象：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private Callable<V> callable;   // Runnable 使用装饰者模式伪装成 Callable\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[s("strong",[n._v("存储任务执行的结果")]),n._v("，这是 run 方法返回值是 void 也可以获取到执行结果的原因：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 正常情况下：任务正常执行结束，outcome 保存执行结果，callable 返回值\n// 非正常情况：callable 向上抛出异常，outcome 保存异常\nprivate Object outcome; \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("执行当前任务的线程对象：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private volatile Thread runner; // 当前任务被线程执行期间，保存当前执行任务的线程对象引用\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[s("strong",[n._v("线程阻塞队列的头节点")]),n._v("：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 会有很多线程去 get 当前任务的结果，这里使用了一种数据结构头插头取（类似栈）的一个队列来保存所有的 get 线程\nprivate volatile WaitNode waiters;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("内部类：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static final class WaitNode {\n    // 单向链表\n    volatile Thread thread;\n    volatile WaitNode next;\n    WaitNode() { thread = Thread.currentThread(); }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"成员方法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员方法-2"}},[n._v("#")]),n._v(" 成员方法")]),n._v(" "),s("p",[n._v("FutureTask 类的成员方法：")]),n._v(" "),s("ul",[s("li",[s("p",[s("strong",[n._v("FutureTask#run")]),n._v("：任务执行入口")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void run() {\n    //条件一：成立说明当前 task 已经被执行过了或者被 cancel 了，非 NEW 状态的任务，线程就不需要处理了\n    //条件二：线程是 NEW 状态，尝试设置当前任务对象的线程是当前线程，设置失败说明其他线程抢占了该任务，直接返回\n    if (state != NEW ||\n        !UNSAFE.compareAndSwapObject(this, runnerOffset, null, Thread.currentThread()))\n        return;\n    try {\n        // 执行到这里，当前 task 一定是 NEW 状态，而且【当前线程也抢占 task 成功】\n        Callable<V> c = callable;\n        // 判断任务是否为空，防止空指针异常；判断 state 状态，防止外部线程在此期间 cancel 掉当前任务\n        // 【因为 task 的执行者已经设置为当前线程，所以这里是线程安全的】\n        if (c != null && state == NEW) {\n            V result;\n            // true 表示 callable.run 代码块执行成功 未抛出异常\n            // false 表示 callable.run 代码块执行失败 抛出异常\n            boolean ran;\n            try {\n                // 【调用自定义的方法，执行结果赋值给 result】\n                result = c.call();\n                // 没有出现异常\n                ran = true;\n            } catch (Throwable ex) {\n                // 出现异常，返回值置空，ran 置为 false\n                result = null;\n                ran = false;\n                // 设置返回的异常\n                setException(ex);\n            }\n            // 代码块执行正常\n            if (ran)\n                // 设置返回的结果\n                set(result);\n        }\n    } finally {\n        // 任务执行完成，取消线程的引用，help GC\n        runner = null;\n        int s = state;\n        // 判断任务是不是被中断\n        if (s >= INTERRUPTING)\n            // 执行中断处理方法\n            handlePossibleCancellationInterrupt(s);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br")])]),s("p",[n._v("FutureTask#set：设置正常返回值，首先将任务状态设置为 COMPLETING 状态代表完成中，逻辑执行完设置为 NORMAL 状态代表任务正常执行完成，最后唤醒 get() 阻塞线程")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("protected void set(V v) {\n    // CAS 方式设置当前任务状态为完成中，设置失败说明其他线程取消了该任务\n    if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n        // 【将结果赋值给 outcome】\n        outcome = v;\n        // 将当前任务状态修改为 NORMAL 正常结束状态。\n        UNSAFE.putOrderedInt(this, stateOffset, NORMAL);\n        finishCompletion();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("FutureTask#setException：设置异常返回值")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("protected void setException(Throwable t) {\n    if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n        // 赋值给返回结果，用来向上层抛出来的异常\n        outcome = t;\n        // 将当前任务的状态 修改为 EXCEPTIONAL\n        UNSAFE.putOrderedInt(this, stateOffset, EXCEPTIONAL);\n        finishCompletion();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("FutureTask#finishCompletion："),s("strong",[n._v("唤醒 get() 阻塞线程")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private void finishCompletion() {\n    // 遍历所有的等待的节点，q 指向头节点\n    for (WaitNode q; (q = waiters) != null;) {\n        // 使用cas设置 waiters 为 null，防止外部线程使用cancel取消当前任务，触发finishCompletion方法重复执行\n        if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) {\n            // 自旋\n            for (;;) {\n                // 获取当前 WaitNode 节点封装的 thread\n                Thread t = q.thread;\n                // 当前线程不为 null，唤醒当前 get() 等待获取数据的线程\n                if (t != null) {\n                    q.thread = null;\n                    LockSupport.unpark(t);\n                }\n                // 获取当前节点的下一个节点\n                WaitNode next = q.next;\n                // 当前节点是最后一个节点了\n                if (next == null)\n                    break;\n                // 断开链表\n                q.next = null; // help gc\n                q = next;\n            }\n            break;\n        }\n    }\n    done();\n    callable = null;    // help GC\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br")])]),s("p",[n._v("FutureTask#handlePossibleCancellationInterrupt：任务中断处理")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private void handlePossibleCancellationInterrupt(int s) {\n    if (s == INTERRUPTING)\n        // 中断状态中\n        while (state == INTERRUPTING)\n            // 等待中断完成\n            Thread.yield();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])])]),n._v(" "),s("li",[s("p",[s("strong",[n._v("FutureTask#get")]),n._v("：获取任务执行的返回值，执行 run 和 get 的不是同一个线程，一般有多个线程 get，只有一个线程 run")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public V get() throws InterruptedException, ExecutionException {\n    // 获取当前任务状态\n    int s = state;\n    // 条件成立说明任务还没执行完成\n    if (s <= COMPLETING)\n        // 返回 task 当前状态，可能当前线程在里面已经睡了一会\n        s = awaitDone(false, 0L);\n    return report(s);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("FutureTask#awaitDone："),s("strong",[n._v("get 线程封装成 WaitNode 对象进入阻塞队列阻塞等待")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private int awaitDone(boolean timed, long nanos) throws InterruptedException {\n    // 0 不带超时\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    // 引用当前线程，封装成 WaitNode 对象\n    WaitNode q = null;\n    // 表示当前线程 waitNode 对象，是否进入阻塞队列\n    boolean queued = false;\n    // 【三次自旋开始休眠】\n    for (;;) {\n        // 判断当前 get() 线程是否被打断，打断返回 true，清除打断标记\n        if (Thread.interrupted()) {\n            // 当前线程对应的等待 node 出队，\n            removeWaiter(q);\n            throw new InterruptedException();\n        }\n        // 获取任务状态\n        int s = state;\n        // 条件成立说明当前任务执行完成已经有结果了\n        if (s > COMPLETING) {\n            // 条件成立说明已经为当前线程创建了 WaitNode，置空 help GC\n            if (q != null)\n                q.thread = null;\n            // 返回当前的状态\n            return s;\n        }\n        // 条件成立说明当前任务接近完成状态，这里让当前线程释放一下 cpu ，等待进行下一次抢占 cpu\n        else if (s == COMPLETING) \n            Thread.yield();\n        // 【第一次自旋】，当前线程还未创建 WaitNode 对象，此时为当前线程创建 WaitNode对象\n        else if (q == null)\n            q = new WaitNode();\n        // 【第二次自旋】，当前线程已经创建 WaitNode 对象了，但是node对象还未入队\n        else if (!queued)\n            // waiters 指向队首，让当前 WaitNode 成为新的队首，【头插法】，失败说明其他线程修改了新的队首\n            queued = UNSAFE.compareAndSwapObject(this, waitersOffset, q.next = waiters, q);\n        // 【第三次自旋】，会到这里，或者 else 内\n        else if (timed) {\n            nanos = deadline - System.nanoTime();\n            if (nanos <= 0L) {\n                removeWaiter(q);\n                return state;\n            }\n            // 阻塞指定的时间\n            LockSupport.parkNanos(this, nanos);\n        }\n        // 条件成立：说明需要阻塞\n        else\n            // 【当前 get 操作的线程被 park 阻塞】，除非有其它线程将唤醒或者将当前线程中断\n            LockSupport.park(this);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br")])]),s("p",[n._v("FutureTask#report：封装运行结果，可以获取 run() 方法中设置的成员变量 outcome，"),s("strong",[n._v("这是 run 方法的返回值是 void 也可以获取到任务执行的结果的原因")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private V report(int s) throws ExecutionException {\n    // 获取执行结果，是在一个 futuretask 对象中的属性，可以直接获取\n    Object x = outcome;\n    // 当前任务状态正常结束\n    if (s == NORMAL)\n        return (V)x;    // 直接返回 callable 的逻辑结果\n    // 当前任务被取消或者中断\n    if (s >= CANCELLED)\n        throw new CancellationException();      // 抛出异常\n    // 执行到这里说明自定义的 callable 中的方法有异常，使用 outcome 上层抛出异常\n    throw new ExecutionException((Throwable)x); \n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("FutureTask#cancel：任务取消，打断正在执行该任务的线程")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean cancel(boolean mayInterruptIfRunning) {\n    // 条件一：表示当前任务处于运行中或者处于线程池任务队列中\n    // 条件二：表示修改状态，成功可以去执行下面逻辑，否则返回 false 表示 cancel 失败\n    if (!(state == NEW &&\n          UNSAFE.compareAndSwapInt(this, stateOffset, NEW,\n                                   mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))\n        return false;\n    try {\n        // 如果任务已经被执行，是否允许打断\n        if (mayInterruptIfRunning) {\n            try {\n                // 获取执行当前 FutureTask 的线程\n                Thread t = runner;\n                if (t != null)\n                    // 打断执行的线程\n                    t.interrupt();\n            } finally {\n                // 设置任务状态为【中断完成】\n                UNSAFE.putOrderedInt(this, stateOffset, INTERRUPTED);\n            }\n        }\n    } finally {\n        // 唤醒所有 get() 阻塞的线程\n        finishCompletion();\n    }\n    return true;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br")])])])]),n._v(" "),s("h3",{attrs:{id:"任务调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务调度"}},[n._v("#")]),n._v(" 任务调度")]),n._v(" "),s("h4",{attrs:{id:"timer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#timer"}},[n._v("#")]),n._v(" Timer")]),n._v(" "),s("p",[n._v("Timer 实现定时功能，Timer 的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个任务的延迟或异常都将会影响到之后的任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('private static void method1() {\n    Timer timer = new Timer();\n    TimerTask task1 = new TimerTask() {\n        @Override\n        public void run() {\n            System.out.println("task 1");\n            //int i = 1 / 0;//任务一的出错会导致任务二无法执行\n            Thread.sleep(2000);\n        }\n    };\n    TimerTask task2 = new TimerTask() {\n        @Override\n        public void run() {\n            System.out.println("task 2");\n        }\n    };\n    // 使用 timer 添加两个任务，希望它们都在 1s 后执行\n    // 但由于 timer 内只有一个线程来顺序执行队列中的任务，因此任务1的延时，影响了任务2的执行\n    timer.schedule(task1, 1000);//17:45:56 c.ThreadPool [Timer-0] - task 1\n    timer.schedule(task2, 1000);//17:45:58 c.ThreadPool [Timer-0] - task 2\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("h4",{attrs:{id:"scheduled"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduled"}},[n._v("#")]),n._v(" Scheduled")]),n._v(" "),s("p",[n._v("任务调度线程池 ScheduledThreadPoolExecutor 继承 ThreadPoolExecutor：")]),n._v(" "),s("ul",[s("li",[n._v("使用内部类 ScheduledFutureTask 封装任务")]),n._v(" "),s("li",[n._v("使用内部类 DelayedWorkQueue 作为线程池队列")]),n._v(" "),s("li",[n._v("重写 onShutdown 方法去处理 shutdown 后的任务")]),n._v(" "),s("li",[n._v("提供 decorateTask 方法作为 ScheduledFutureTask 的修饰方法，以便开发者进行扩展")])]),n._v(" "),s("p",[n._v("构造方法："),s("code",[n._v("Executors.newScheduledThreadPool(int corePoolSize)")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ScheduledThreadPoolExecutor(int corePoolSize) {\n    // 最大线程数固定为 Integer.MAX_VALUE，保活时间 keepAliveTime 固定为 0\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          // 阻塞队列是 DelayedWorkQueue\n          new DelayedWorkQueue());\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("常用 API：")]),n._v(" "),s("ul",[s("li",[s("code",[n._v("ScheduledFuture<?> schedule(Runnable/Callable<V>, long delay, TimeUnit u)")]),n._v("：延迟执行任务")]),n._v(" "),s("li",[s("code",[n._v("ScheduledFuture<?> scheduleAtFixedRate(Runnable/Callable<V>, long initialDelay, long period, TimeUnit unit)")]),n._v("：定时执行周期任务，不考虑执行的耗时，参数为初始延迟时间、间隔时间、单位")]),n._v(" "),s("li",[s("code",[n._v("ScheduledFuture<?> scheduleWithFixedDelay(Runnable/Callable<V>, long initialDelay, long delay, TimeUnit unit)")]),n._v("：定时执行周期任务，考虑执行的耗时，参数为初始延迟时间、间隔时间、单位")])]),n._v(" "),s("p",[n._v("基本使用：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("延迟任务，但是出现异常并不会在控制台打印，也不会影响其他线程的执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args){\n    // 线程池大小为1时也是串行执行\n    ScheduledExecutorService executor = Executors.newScheduledThreadPool(2);\n    // 添加两个任务，都在 1s 后同时执行\n    executor.schedule(() -> {\n        System.out.println("任务1，执行时间：" + new Date());\n        //int i = 1 / 0;\n        try { Thread.sleep(2000); } catch (InterruptedException e) { }\n    }, 1000, TimeUnit.MILLISECONDS);\n    \n    executor.schedule(() -> {\n        System.out.println("任务2，执行时间：" + new Date());\n    }, 1000, TimeUnit.MILLISECONDS);\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("定时任务 scheduleAtFixedRate："),s("strong",[n._v("一次任务的启动到下一次任务的启动")]),n._v("之间只要大于等于间隔时间，抢占到 CPU 就会立即执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args) {\n    ScheduledExecutorService pool = Executors.newScheduledThreadPool(1);\n    System.out.println("start..." + new Date());\n    \n    pool.scheduleAtFixedRate(() -> {\n        System.out.println("running..." + new Date());\n        Thread.sleep(2000);\n    }, 1, 1, TimeUnit.SECONDS);\n}\n\n/*start...Sat Apr 24 18:08:12 CST 2021\nrunning...Sat Apr 24 18:08:13 CST 2021\nrunning...Sat Apr 24 18:08:15 CST 2021\nrunning...Sat Apr 24 18:08:17 CST 2021\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("定时任务 scheduleWithFixedDelay："),s("strong",[n._v("一次任务的结束到下一次任务的启动之间")]),n._v("等于间隔时间，抢占到 CPU 就会立即执行，这个方法才是真正的设置两个任务之间的间隔")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args){\n    ScheduledExecutorService pool = Executors.newScheduledThreadPool(3);\n    System.out.println("start..." + new Date());\n    \n    pool.scheduleWithFixedDelay(() -> {\n        System.out.println("running..." + new Date());\n        Thread.sleep(2000);\n    }, 1, 1, TimeUnit.SECONDS);\n}\n/*start...Sat Apr 24 18:11:41 CST 2021\nrunning...Sat Apr 24 18:11:42 CST 2021\nrunning...Sat Apr 24 18:11:45 CST 2021\nrunning...Sat Apr 24 18:11:48 CST 2021\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])])])]),n._v(" "),s("h4",{attrs:{id:"成员属性-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员属性-4"}},[n._v("#")]),n._v(" 成员属性")]),n._v(" "),s("h5",{attrs:{id:"成员变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员变量"}},[n._v("#")]),n._v(" 成员变量")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("shutdown 后是否继续执行周期任务：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private volatile boolean continueExistingPeriodicTasksAfterShutdown;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("shutdown 后是否继续执行延迟任务：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private volatile boolean executeExistingDelayedTasksAfterShutdown = true;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("取消方法是否将该任务从队列中移除：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 默认 false，不移除，等到线程拿到任务之后抛弃\nprivate volatile boolean removeOnCancel = false;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("任务的序列号，可以用来比较优先级：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private static final AtomicLong sequencer = new AtomicLong();\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"延迟任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延迟任务"}},[n._v("#")]),n._v(" 延迟任务")]),n._v(" "),s("p",[n._v("ScheduledFutureTask 继承 FutureTask，实现 RunnableScheduledFuture 接口，具有延迟执行的特点，覆盖 FutureTask 的 run 方法来实现对"),s("strong",[n._v("延时执行、周期执行")]),n._v("的支持。对于延时任务调用 FutureTask#run，而对于周期性任务则调用 FutureTask#runAndReset 并且在成功之后根据 fixed-delay/fixed-rate 模式来设置下次执行时间并重新将任务塞到工作队列")]),n._v(" "),s("p",[n._v("在调度线程池中无论是 runnable 还是 callable，无论是否需要延迟和定时，所有的任务都会被封装成 ScheduledFutureTask")]),n._v(" "),s("p",[n._v("成员变量：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("任务序列号：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private final long sequenceNumber;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("执行时间：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private long time;          // 任务可以被执行的时间，交付时间，以纳秒表示\nprivate final long period;  // 0 表示非周期任务，正数表示 fixed-rate 模式的周期，负数表示 fixed-delay 模式\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("fixed-rate：两次开始启动的间隔，fixed-delay：一次执行结束到下一次开始启动")])]),n._v(" "),s("li",[s("p",[n._v("实际的任务对象：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("RunnableScheduledFuture<V> outerTask = this;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("任务在队列数组中的索引下标：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// DelayedWorkQueue 底层使用的数据结构是最小堆，记录当前任务在堆中的索引，-1 代表删除\nint heapIndex;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])])]),n._v(" "),s("p",[n._v("成员方法：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("构造方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("ScheduledFutureTask(Runnable r, V result, long ns, long period) {\n    super(r, result);\n    // 任务的触发时间\n    this.time = ns;\n    // 任务的周期，多长时间执行一次\n    this.period = period;\n    // 任务的序号\n    this.sequenceNumber = sequencer.getAndIncrement();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("compareTo()：ScheduledFutureTask 根据执行时间 time 正序排列，如果执行时间相同，在按照序列号 sequenceNumber 正序排列，任务需要放入 DelayedWorkQueue，延迟队列中使用该方法按照从小到大进行排序")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int compareTo(Delayed other) {\n    if (other == this) // compare zero if same object\n        return 0;\n    if (other instanceof ScheduledFutureTask) {\n        // 类型强转\n        ScheduledFutureTask<?> x = (ScheduledFutureTask<?>)other;\n        // 比较者 - 被比较者的执行时间\n        long diff = time - x.time;\n        // 比较者先执行\n        if (diff < 0)\n            return -1;\n        // 被比较者先执行\n        else if (diff > 0)\n            return 1;\n        // 比较者的序列号小\n        else if (sequenceNumber < x.sequenceNumber)\n            return -1;\n        else\n            return 1;\n    }\n    // 不是 ScheduledFutureTask 类型时，根据延迟时间排序\n    long diff = getDelay(NANOSECONDS) - other.getDelay(NANOSECONDS);\n    return (diff < 0) ? -1 : (diff > 0) ? 1 : 0;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("run()：执行任务，非周期任务直接完成直接结束，"),s("strong",[n._v("周期任务执行完后会设置下一次的执行时间，重新放入线程池的阻塞队列")]),n._v("，如果线程池中的线程数量少于核心线程，就会添加 Worker 开启新线程")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void run() {\n    // 是否周期性，就是判断 period 是否为 0\n    boolean periodic = isPeriodic();\n    // 根据是否是周期任务检查当前状态能否执行任务，不能执行就取消任务\n    if (!canRunInCurrentRunState(periodic))\n        cancel(false);\n    // 非周期任务，直接调用 FutureTask#run 执行\n    else if (!periodic)\n        ScheduledFutureTask.super.run();\n    // 周期任务的执行，返回 true 表示执行成功\n    else if (ScheduledFutureTask.super.runAndReset()) {\n        // 设置周期任务的下一次执行时间\n        setNextRunTime();\n        // 任务的下一次执行安排，如果当前线程池状态可以执行周期任务，加入队列，并开启新线程\n        reExecutePeriodic(outerTask);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("p",[n._v("周期任务正常完成后"),s("strong",[n._v("任务的状态不会变化")]),n._v("，依旧是 NEW，不会设置 outcome 属性。但是如果本次任务执行出现异常，会进入 setException 方法将任务状态置为异常，把异常保存在 outcome 中，方法返回 false，后续的该任务将不会再周期的执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("protected boolean runAndReset() {\n    // 任务不是新建的状态了，或者被别的线程执行了，直接返回 false\n    if (state != NEW ||\n        !UNSAFE.compareAndSwapObject(this, runnerOffset, null, Thread.currentThread()))\n        return false;\n    boolean ran = false;\n    int s = state;\n    try {\n        Callable<V> c = callable;\n        if (c != null && s == NEW) {\n            try {\n                // 执行方法，没有返回值\n                c.call();\n                ran = true;\n            } catch (Throwable ex) {\n                // 出现异常，把任务设置为异常状态，唤醒所有的 get 阻塞线程\n                setException(ex);\n            }\n        }\n    } finally {\n        // 执行完成把执行线程引用置为 null\n        runner = null;\n        s = state;\n        // 如果线程被中断进行中断处理\n        if (s >= INTERRUPTING)\n            handlePossibleCancellationInterrupt(s);\n    }\n    // 如果正常执行，返回 true，并且任务状态没有被取消\n    return ran && s == NEW;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 任务下一次的触发时间\nprivate void setNextRunTime() {\n    long p = period;\n    if (p > 0)\n        // fixed-rate 模式，【时间设置为上一次执行任务的时间 + p】，两次任务执行的时间差\n        time += p;\n    else\n        // fixed-delay 模式，下一次执行时间是【当前这次任务结束的时间（就是现在） + delay 值】\n        time = triggerTime(-p);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("reExecutePeriodic()"),s("strong",[n._v("：准备任务的下一次执行，重新放入阻塞任务队列")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// ScheduledThreadPoolExecutor#reExecutePeriodic\nvoid reExecutePeriodic(RunnableScheduledFuture<?> task) {\n    if (canRunInCurrentRunState(true)) {\n        // 【放入任务队列】\n        super.getQueue().add(task);\n        // 如果提交完任务之后，线程池状态变为了 shutdown 状态，需要再次检查是否可以执行，\n        // 如果不能执行且任务还在队列中未被取走，则取消任务\n        if (!canRunInCurrentRunState(true) && remove(task))\n            task.cancel(false);\n        else\n            // 当前线程池状态可以执行周期任务，加入队列，并【根据线程数量是否大于核心线程数确定是否开启新线程】\n            ensurePrestart();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("cancel()：取消任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean cancel(boolean mayInterruptIfRunning) {\n    // 调用父类 FutureTask#cancel 来取消任务\n    boolean cancelled = super.cancel(mayInterruptIfRunning);\n    // removeOnCancel 用于控制任务取消后是否应该从阻塞队列中移除\n    if (cancelled && removeOnCancel && heapIndex >= 0)\n        // 从等待队列中删除该任务，并调用 tryTerminate() 判断是否需要停止线程池\n        remove(this);\n    return cancelled;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"延迟队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延迟队列"}},[n._v("#")]),n._v(" 延迟队列")]),n._v(" "),s("p",[n._v("DelayedWorkQueue 是支持延时获取元素的阻塞队列，内部采用优先队列 PriorityQueue（小根堆、满二叉树）存储元素")]),n._v(" "),s("p",[n._v("其他阻塞队列存储节点的数据结构大都是链表，"),s("strong",[n._v("延迟队列是数组")]),n._v("，所以延迟队列出队头元素后需要"),s("strong",[n._v("让其他元素（尾）替换到头节点")]),n._v("，防止空指针异常")]),n._v(" "),s("p",[n._v("成员变量：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("容量：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private static final int INITIAL_CAPACITY = 16;         // 初始容量\nprivate int size = 0;                                   // 节点数量\nprivate RunnableScheduledFuture<?>[] queue = \n    new RunnableScheduledFuture<?>[INITIAL_CAPACITY];   // 存放节点\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("锁：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private final ReentrantLock lock = new ReentrantLock(); // 控制并发\nprivate final Condition available = lock.newCondition();// 条件队列\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("阻塞等待头节点的线程：线程池内的某个线程去 take() 获取任务时，如果延迟队列顶层节点不为 null（队列内有任务），但是节点任务还不到触发时间，线程就去检查"),s("strong",[n._v("队列的 leader字段")]),n._v("是否被占用")]),n._v(" "),s("ul",[s("li",[n._v("如果未被占用，则当前线程占用该字段，然后当前线程到 available 条件队列指定超时时间 "),s("code",[n._v("堆顶任务.time - now()")]),n._v(" 挂起")]),n._v(" "),s("li",[n._v("如果被占用，当前线程直接到 available 条件队列不指定超时时间的挂起")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// leader 在 available 条件队列内是首元素，它超时之后会醒过来，然后再次将堆顶元素获取走，获取走之后，take()结束之前，会调用是 available.signal() 唤醒下一个条件队列内的等待者，然后释放 lock，下一个等待者被唤醒后去到 AQS 队列，做 acquireQueue(node) 逻辑\nprivate Thread leader = null;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])])])]),n._v(" "),s("p",[n._v("成员方法")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("offer()：插入节点")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean offer(Runnable x) {\n    // 判空\n    if (x == null)\n        throw new NullPointerException();\n    RunnableScheduledFuture<?> e = (RunnableScheduledFuture<?>)x;\n    // 队列锁，增加删除数据时都要加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        int i = size;\n        // 队列数量大于存放节点的数组长度，需要扩容\n        if (i >= queue.length)\n            // 扩容为原来长度的 1.5 倍\n            grow();\n        size = i + 1;\n        // 当前是第一个要插入的节点\n        if (i == 0) {\n            queue[0] = e;\n            // 修改 ScheduledFutureTask 的 heapIndex 属性，表示该对象在队列里的下标\n            setIndex(e, 0);\n        } else {\n            // 向上调整元素的位置，并更新 heapIndex \n            siftUp(i, e);\n        }\n        // 情况1：当前任务是第一个加入到 queue 内的任务，所以在当前任务加入到 queue 之前，take() 线程会直接\n        //      到 available 队列不设置超时的挂起，并不会去占用 leader 字段，这时需会唤醒一个线程 让它去消费\n        // 情况2：当前任务【优先级最高】，原堆顶任务可能还未到触发时间，leader 线程设置超时的在 available 挂起\n        //      原先的 leader 等待的是原先的头节点，所以 leader 已经无效，需要将 leader 线程唤醒，\n        //      唤醒之后它会检查堆顶，如果堆顶任务可以被消费，则直接获取走，否则继续成为 leader 等待新堆顶任务\n        if (queue[0] == e) {\n            // 将 leader 设置为 null\n            leader = null;\n            // 直接随便唤醒等待头结点的阻塞线程\n            available.signal();\n        }\n    } finally {\n        lock.unlock();\n    }\n    return true;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 插入新节点后对堆进行调整，进行节点上移，保持其特性【节点的值小于子节点的值】，小顶堆\nprivate void siftUp(int k, RunnableScheduledFuture<?> key) {\n    while (k > 0) {\n        // 父节点，就是堆排序\n        int parent = (k - 1) >>> 1;\n        RunnableScheduledFuture<?> e = queue[parent];\n        // key 和父节点比，如果大于父节点可以直接返回，否则就继续上浮\n        if (key.compareTo(e) >= 0)\n            break;\n        queue[k] = e;\n        setIndex(e, k);\n        k = parent;\n    }\n    queue[k] = key;\n    setIndex(key, k);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("poll()：非阻塞获取头结点，"),s("strong",[n._v("获取执行时间最近并且可以执行的")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 非阻塞获取\npublic RunnableScheduledFuture<?> poll() {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 获取队头节点，因为是小顶堆\n        RunnableScheduledFuture<?> first = queue[0];\n        // 头结点为空或者的延迟时间没到返回 null\n        if (first == null || first.getDelay(NANOSECONDS) > 0)\n            return null;\n        else\n            // 头结点达到延迟时间，【尾节点成为替代节点下移调整堆结构】，返回头结点\n            return finishPoll(first);\n    } finally {\n        lock.unlock();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f) {\n    // 获取尾索引\n    int s = --size;\n    // 获取尾节点\n    RunnableScheduledFuture<?> x = queue[s];\n    // 将堆结构最后一个节点占用的 slot 设置为 null，因为该节点要尝试升级成堆顶，会根据特性下调\n    queue[s] = null;\n    // s == 0 说明 当前堆结构只有堆顶一个节点，此时不需要做任何的事情\n    if (s != 0)\n        // 从索引处 0 开始向下调整\n        siftDown(0, x);\n    // 出队的元素索引设置为 -1\n    setIndex(f, -1);\n    return f;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("take()：阻塞获取头节点，读取当前堆中最小的也就是触发时间最近的任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public RunnableScheduledFuture<?> take() throws InterruptedException {\n    final ReentrantLock lock = this.lock;\n    // 保证线程安全\n    lock.lockInterruptibly();\n    try {\n        for (;;) {\n            // 头节点\n            RunnableScheduledFuture<?> first = queue[0];\n            if (first == null)\n                // 等待队列不空，直至有任务通过 offer 入队并唤醒\n                available.await();\n            else {\n                // 获取头节点的延迟时间是否到时\n                long delay = first.getDelay(NANOSECONDS);\n                if (delay <= 0)\n                    // 到达触发时间，获取头节点并调整堆，重新选择延迟时间最小的节点放入头部\n                    return finishPoll(first);\n                \n                // 逻辑到这说明头节点的延迟时间还没到\n                first = null;\n                // 说明有 leader 线程在等待获取头节点，当前线程直接去阻塞等待\n                if (leader != null)\n                    available.await();\n                else {\n                    // 没有 leader 线程，【当前线程作为leader线程，并设置头结点的延迟时间作为阻塞时间】\n                    Thread thisThread = Thread.currentThread();\n                    leader = thisThread;\n                    try {\n                        // 在条件队列 available 使用带超时的挂起（堆顶任务.time - now() 纳秒值..）\n                        available.awaitNanos(delay);\n                        // 到达阻塞时间时，当前线程会从这里醒来来\n                    } finally {\n                        // t堆顶更新，leader 置为 null，offer 方法释放锁后，\n                        // 有其它线程通过 take/poll 拿到锁,读到 leader == null，然后将自身更新为leader。\n                        if (leader == thisThread)\n                            // leader 置为 null 用以接下来判断是否需要唤醒后继线程\n                            leader = null;\n                    }\n                }\n            }\n        }\n    } finally {\n        // 没有 leader 线程，头结点不为 null，唤醒阻塞获取头节点的线程，\n        // 【如果没有这一步，就会出现有了需要执行的任务，但是没有线程去执行】\n        if (leader == null && queue[0] != null)\n            available.signal();\n        lock.unlock();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("remove()：删除节点，堆移除一个元素的时间复杂度是 O(log n)，"),s("strong",[n._v("延迟任务维护了 heapIndex")]),n._v("，直接访问的时间复杂度是 O(1)，从而可以更快的移除元素，任务在队列中被取消后会进入该逻辑")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean remove(Object x) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 查找对象在队列数组中的下标\n        int i = indexOf(x);\n        // 节点不存在，返回 false\n        if (i < 0)\n            return false;\n        // 修改元素的 heapIndex，-1 代表删除\n        setIndex(queue[i], -1);\n        // 尾索引是长度-1\n        int s = --size;\n        // 尾节点作为替代节点\n        RunnableScheduledFuture<?> replacement = queue[s];\n        queue[s] = null;\n        // s == i 说明头节点就是尾节点，队列空了\n        if (s != i) {\n            // 向下调整\n            siftDown(i, replacement);\n            // 说明没发生调整\n            if (queue[i] == replacement)\n                // 上移和下移不可能同时发生，替代节点大于子节点时下移，否则上移\n                siftUp(i, replacement);\n        }\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br")])])])]),n._v(" "),s("h4",{attrs:{id:"成员方法-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员方法-3"}},[n._v("#")]),n._v(" 成员方法")]),n._v(" "),s("h5",{attrs:{id:"提交任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交任务"}},[n._v("#")]),n._v(" 提交任务")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("schedule()：延迟执行方法，并指定执行的时间，默认是当前时间")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void execute(Runnable command) {\n    // 以零延时任务的形式实现\n    schedule(command, 0, NANOSECONDS);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {\n    // 判空\n    if (command == null || unit == null) throw new NullPointerException();\n    // 没有做任何操作，直接将 task 返回，该方法主要目的是用于子类扩展，并且【根据延迟时间设置任务触发的时间点】\n    RunnableScheduledFuture<?> t = decorateTask(command, new ScheduledFutureTask<Void>(\n                                                    command, null, triggerTime(delay, unit)));\n    // 延迟执行\n    delayedExecute(t);\n    return t;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 返回【当前时间 + 延迟时间】，就是触发当前任务执行的时间\nprivate long triggerTime(long delay, TimeUnit unit) {\n    // 设置触发的时间\n    return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));\n}\nlong triggerTime(long delay) {\n    // 如果 delay < Long.Max_VALUE/2，则下次执行时间为当前时间 +delay\n    // 否则为了避免队列中出现由于溢出导致的排序紊乱,需要调用overflowFree来修正一下delay\n    return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("overflowFree 的原因：如果某个任务的 delay 为负数，说明当前可以执行（其实早该执行了）。阻塞队列中维护任务顺序是基于 compareTo 比较的，比较两个任务的顺序会用 time 相减。那么可能出现一个 delay 为正数减去另一个为负数的 delay，结果上溢为负数，则会导致 compareTo 产生错误的结果")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private long overflowFree(long delay) {\n    Delayed head = (Delayed) super.getQueue().peek();\n    if (head != null) {\n        long headDelay = head.getDelay(NANOSECONDS);\n        // 判断一下队首的delay是不是负数，如果是正数就不用管，怎么减都不会溢出\n        // 否则拿当前 delay 减去队首的 delay 来比较看，如果不出现上溢，排序不会乱\n        // 不然就把当前 delay 值给调整为 Long.MAX_VALUE + 队首 delay\n        if (headDelay < 0 && (delay - headDelay < 0))\n            delay = Long.MAX_VALUE + headDelay;\n    }\n    return delay;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("scheduleAtFixedRate()：定时执行，一次任务的启动到下一次任务的启动的间隔")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period,\n                                              TimeUnit unit) {\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    if (period <= 0)\n        throw new IllegalArgumentException();\n    // 任务封装，【指定初始的延迟时间和周期时间】\n    ScheduledFutureTask<Void> sft =new ScheduledFutureTask<Void>(command, null,\n                                      triggerTime(initialDelay, unit), unit.toNanos(period));\n    // 默认返回本身\n    RunnableScheduledFuture<Void> t = decorateTask(command, sft);\n    sft.outerTask = t;\n    // 开始执行这个任务\n    delayedExecute(t);\n    return t;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("scheduleWithFixedDelay()：定时执行，一次任务的结束到下一次任务的启动的间隔")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay,\n                                                 TimeUnit unit) {\n    if (command == null || unit == null) \n        throw new NullPointerException();\n    if (delay <= 0)\n        throw new IllegalArgumentException();\n    // 任务封装，【指定初始的延迟时间和周期时间】，周期时间为 - 表示是 fixed-delay 模式\n    ScheduledFutureTask<Void> sft = new ScheduledFutureTask<Void>(command, null,\n                                      triggerTime(initialDelay, unit), unit.toNanos(-delay));\n    RunnableScheduledFuture<Void> t = decorateTask(command, sft);\n    sft.outerTask = t;\n    delayedExecute(t);\n    return t;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])])])]),n._v(" "),s("h5",{attrs:{id:"运行任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行任务"}},[n._v("#")]),n._v(" 运行任务")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("delayedExecute()："),s("strong",[n._v("校验线程池状态")]),n._v("，延迟或周期性任务的主要执行方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private void delayedExecute(RunnableScheduledFuture<?> task) {\n    // 线程池是 SHUTDOWN 状态，需要执行拒绝策略\n    if (isShutdown())\n        reject(task);\n    else {\n        // 把当前任务放入阻塞队列，因为需要【获取执行时间最近的】，当前任务需要比较\n        super.getQueue().add(task);\n        // 线程池状态为 SHUTDOWN 并且不允许执行任务了，就从队列删除该任务，并设置任务的状态为取消状态\n        if (isShutdown() && !canRunInCurrentRunState(task.isPeriodic()) && remove(task))\n            task.cancel(false);\n        else\n            // 可以执行\n            ensurePrestart();\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("ensurePrestart()："),s("strong",[n._v("开启线程执行任务")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// ThreadPoolExecutor#ensurePrestart\nvoid ensurePrestart() {\n    int wc = workerCountOf(ctl.get());\n    // worker数目小于corePoolSize，则添加一个worker。\n    if (wc < corePoolSize)\n        // 第二个参数 true 表示采用核心线程数量限制，false 表示采用 maximumPoolSize\n        addWorker(null, true);\n    // corePoolSize = 0的情况，至少开启一个线程，【担保机制】\n    else if (wc == 0)\n        addWorker(null, false);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("canRunInCurrentRunState()：任务运行时都会被调用以校验当前状态是否可以运行任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("boolean canRunInCurrentRunState(boolean periodic) {\n    // 根据是否是周期任务判断，在线程池 shutdown 后是否继续执行该任务，默认非周期任务是继续执行的\n    return isRunningOrShutdown(periodic ? continueExistingPeriodicTasksAfterShutdown :\n                               executeExistingDelayedTasksAfterShutdown);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])])]),n._v(" "),s("li",[s("p",[n._v("onShutdown()：删除并取消工作队列中的不需要再执行的任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("void onShutdown() {\n    BlockingQueue<Runnable> q = super.getQueue();\n    // shutdown 后是否仍然执行延时任务\n    boolean keepDelayed = getExecuteExistingDelayedTasksAfterShutdownPolicy();\n    // shutdown 后是否仍然执行周期任务\n    boolean keepPeriodic = getContinueExistingPeriodicTasksAfterShutdownPolicy();\n    // 如果两者皆不可，则对队列中【所有任务】调用 cancel 取消并清空队列\n    if (!keepDelayed && !keepPeriodic) {\n        for (Object e : q.toArray())\n            if (e instanceof RunnableScheduledFuture<?>)\n                ((RunnableScheduledFuture<?>) e).cancel(false);\n        q.clear();\n    }\n    else {\n        for (Object e : q.toArray()) {\n            if (e instanceof RunnableScheduledFuture) {\n                RunnableScheduledFuture<?> t = (RunnableScheduledFuture<?>)e;\n                // 不需要执行的任务删除并取消，已经取消的任务也需要从队列中删除\n                if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) ||\n                    t.isCancelled()) {\n                    if (q.remove(t))\n                        t.cancel(false);\n                }\n            }\n        }\n    }\n    // 因为任务被从队列中清理掉，所以需要调用 tryTerminate 尝试【改变线程池的状态】\n    tryTerminate();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br")])])])]),n._v(" "),s("h3",{attrs:{id:"forkjoin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#forkjoin"}},[n._v("#")]),n._v(" ForkJoin")]),n._v(" "),s("p",[n._v("Fork/Join：线程池的实现，体现是分治思想，适用于能够进行任务拆分的 CPU 密集型运算，用于"),s("strong",[n._v("并行计算")])]),n._v(" "),s("p",[n._v("任务拆分：将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计算，如归并排序、斐波那契数列都可以用分治思想进行求解")]),n._v(" "),s("ul",[s("li",[n._v("Fork/Join 在"),s("strong",[n._v("分治的基础上加入了多线程")]),n._v("，把每个任务的分解和合并交给不同的线程来完成，提升了运算效率")]),n._v(" "),s("li",[n._v("ForkJoin 使用 ForkJoinPool 来启动，是一个特殊的线程池，默认会创建与 CPU 核心数大小相同的线程池")]),n._v(" "),s("li",[n._v("任务有返回值继承 RecursiveTask，没有返回值继承 RecursiveAction")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args) {\n    ForkJoinPool pool = new ForkJoinPool(4);\n    System.out.println(pool.invoke(new MyTask(5)));\n    //拆分  5 + MyTask(4) --\x3e 4 + MyTask(3) --\x3e\n}\n\n// 1~ n 之间整数的和\nclass MyTask extends RecursiveTask<Integer> {\n    private int n;\n\n    public MyTask(int n) {\n        this.n = n;\n    }\n\n    @Override\n    public String toString() {\n        return "MyTask{" + "n=" + n + \'}\';\n    }\n\n    @Override\n    protected Integer compute() {\n        // 如果 n 已经为 1，可以求得结果了\n        if (n == 1) {\n            return n;\n        }\n        // 将任务进行拆分(fork)\n        MyTask t1 = new MyTask(n - 1);\n        t1.fork();\n        // 合并(join)结果\n        int result = n + t1.join();\n        return result;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])]),s("p",[n._v("继续拆分优化：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('class AddTask extends RecursiveTask<Integer> {\n    int begin;\n    int end;\n    public AddTask(int begin, int end) {\n        this.begin = begin;\n        this.end = end;\n    }\n    \n    @Override\n    public String toString() {\n        return "{" + begin + "," + end + \'}\';\n    }\n    \n    @Override\n    protected Integer compute() {\n        // 5, 5\n        if (begin == end) {\n            return begin;\n        }\n        // 4, 5  防止多余的拆分  提高效率\n        if (end - begin == 1) {\n            return end + begin;\n        }\n        // 1 5\n        int mid = (end + begin) / 2; // 3\n        AddTask t1 = new AddTask(begin, mid); // 1,3\n        t1.fork();\n        AddTask t2 = new AddTask(mid + 1, end); // 4,5\n        t2.fork();\n        int result = t1.join() + t2.join();\n        return result;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])]),s("p",[n._v("ForkJoinPool 实现了"),s("strong",[n._v("工作窃取算法")]),n._v("来提高 CPU 的利用率：")]),n._v(" "),s("ul",[s("li",[n._v("每个线程都维护了一个"),s("strong",[n._v("双端队列")]),n._v("，用来存储需要执行的任务")]),n._v(" "),s("li",[n._v("工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行")]),n._v(" "),s("li",[n._v("窃取的必须是"),s("strong",[n._v("最晚的任务")]),n._v("，避免和队列所属线程发生竞争，但是队列中只有一个任务时还是会发生竞争")])]),n._v(" "),s("h3",{attrs:{id:"享元模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[n._v("#")]),n._v(" 享元模式")]),n._v(" "),s("p",[n._v("享元模式（Flyweight pattern）： 用于减少创建对象的数量，以减少内存占用和提高性能，这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式")]),n._v(" "),s("p",[n._v("异步模式：让有限的工作线程（Worker Thread）来轮流异步处理无限多的任务，也可将其归类为分工模式，典型实现就是线程池")]),n._v(" "),s("p",[n._v("工作机制：享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象")]),n._v(" "),s("p",[n._v("自定义连接池：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args) {\n    Pool pool = new Pool(2);\n    for (int i = 0; i < 5; i++) {\n        new Thread(() -> {\n            Connection con = pool.borrow();\n            try {\n                Thread.sleep(new Random().nextInt(1000));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            pool.free(con);\n        }).start();\n    }\n}\nclass Pool {\n    //连接池的大小\n    private final int poolSize;\n    //连接对象的数组\n    private Connection[] connections;\n    //连接状态数组 0表示空闲  1表示繁忙\n    private AtomicIntegerArray states;  //int[] -> AtomicIntegerArray\n\n    //构造方法\n    public Pool(int poolSize) {\n        this.poolSize = poolSize;\n        this.connections = new Connection[poolSize];\n        this.states = new AtomicIntegerArray(new int[poolSize]);\n        for (int i = 0; i < poolSize; i++) {\n            connections[i] = new MockConnection("连接" + (i + 1));\n        }\n    }\n\n    //使用连接\n    public Connection borrow() {\n        while (true) {\n            for (int i = 0; i < poolSize; i++) {\n                if (states.get(i) == 0) {\n                    if (states.compareAndSet(i, 0, 1)) {\n                        System.out.println(Thread.currentThread().getName() + " borrow " +  connections[i]);\n                        return connections[i];\n                    }\n                }\n            }\n            //如果没有空闲连接，当前线程等待\n            synchronized (this) {\n                try {\n                    System.out.println(Thread.currentThread().getName() + " wait...");\n                    this.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    //归还连接\n    public void free(Connection con) {\n        for (int i = 0; i < poolSize; i++) {\n            if (connections[i] == con) {//判断是否是同一个对象\n                states.set(i, 0);//不用cas的原因是只会有一个线程使用该连接\n                synchronized (this) {\n                    System.out.println(Thread.currentThread().getName() + " free " + con);\n                    this.notifyAll();\n                }\n                break;\n            }\n        }\n    }\n\n}\n\nclass MockConnection implements Connection {\n    private String name;\n    //.....\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);